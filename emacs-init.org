#+TITLE: Emacs Configuration

* User information

#+begin_src emacs-lisp
(setq user-full-name "Svend Sorensen")
(setq user-mail-address "svend@ciffer.net")
#+end_src

* Installing Emacs

Install from homebrew on OS X.

#+begin_src sh
brew install emacs --with-cocoa --with-glib --with-gnutls --with-imagemagick --with-librsvg --devel
rsync -a --delete /usr/local/Cellar/emacs/*/Emacs.app ~/Applications
tic -o ~/.terminfo /usr/local/Cellar/emacs/*/share/emacs/*/etc/e/eterm-color.ti
#+end_src

* Initialize Cask

This is required before any packages can be used.

#+begin_src emacs-lisp
(require 'cask (expand-file-name "emacs-cask/cask.el" user-emacs-directory))
(cask-initialize)
#+end_src

* Initialize use-package

This is required before any use-package forms.

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
#+end_src

* Initialize exec-path-from-shell

This needs to come before anything that uses PATH (e.g.
executable-find).

#+begin_src emacs-lisp
(defun bash-shell-variables()
  "Return a list of env variables"
  (cl-set-difference
   (mapcar (lambda (s) (car (split-string s "=")))
           (split-string
            (shell-command-to-string
             "bash -l -i -c \"/usr/local/bin/gprintenv --null\" 2>/dev/null")
            (char-to-string ?\x0) t))
   '("Apple_PubSub_Socket_Render" "_")
   :test 'string-equal))

(use-package exec-path-from-shell
  :if (eq window-system 'ns)
  :config
  (progn
    (mapc
     (lambda (variable)
       (add-to-list 'exec-path-from-shell-variables variable))
     '("ALTERNATE_EDITOR" "CDPATH" "EDITOR" "GOPATH" "GPG_AGENT_INFO" "HISTFILE" "INFOPATH" "LANG" "LC_ALL" "SSH_AUTH_SOCK"))
    (exec-path-from-shell-initialize)))
#+end_src

* Emacs UI

** Chrome

- Disable welcome screen
- Disable menu bar
- Disable tool bar

#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+end_src

** Mode line

- Display clock in the status bar
- Display column number in mode-line (line number is displayed by
  default)

#+begin_src emacs-lisp
(display-time-mode t)
(column-number-mode t)
#+end_src

Display date in 24 hour format in mode line.

#+begin_src emacs-lisp
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
#+end_src

** Fixed/variable pitch

Use [[http://dejavu-fonts.org/][DejaVu font family]]. These fonts are in the [[https://packages.debian.org/sid/fonts-dejavu][fonts-dejavu]] package on
Debian. On OS X, use homebrew to install.

Install homebrew-cask and caskroom-fonts.

#+begin_src sh
brew tap caskroom/cask
brew tap caskroom/font
#+end_src

Install fonts.

#+begin_src sh
brew cask install font-dejavu-sans
#+end_src

#+begin_src emacs-lisp
(defun enable-fixed-pitch-mode ()
  (fixed-pitch-mode t))

(dolist (hook '(comint-mode-hook
                dired-mode-hook
                ediff-mode-hook
                ibuffer-mode-hook
                gnus-group-mode-hook
                ledger-report-mode-hook
                ledger-mode-hook
                magit-log-mode-hook
                notmuch-search-hook
                prog-mode-hook
                quickrun/mode-hook
                term-mode-hook
                vc-annotate-mode-hook))
  (add-hook hook 'enable-fixed-pitch-mode))

;; Remove BufFace from mode line
(eval-after-load "face-remap"
  '(diminish 'buffer-face-mode))
#+end_src

* Emacs themes

Disable current theme before loading new theme. This prevents
artifacts from the old theme.

[[https://stackoverflow.com/questions/22866733/emacs-disable-theme-after-loading-a-different-one-themes-conflict?noredirect%3D1#comment34887344_22866733][Emacs disable-theme after loading a different one (Stack Overflow)]]

#+begin_src emacs-lisp
(defun disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (i custom-enabled-themes)
    (disable-theme i)))

(defun my-load-theme ()
  "Load a single theme then load override theme."
  (interactive)
  (disable-all-themes)
  (call-interactively 'load-theme)
  (load-theme 'svend t))
#+end_src

Treat all themes as safe.

#+begin_src emacs-lisp
(setq custom-safe-themes t)
#+end_src

* Emacs settings

** Bell

#+begin_src emacs-lisp
(setq visible-bell t)
(setq ring-bell-function
      (lambda ()
        (unless
            (memq this-command
                  '(abort-recursive-edit
                    isearch-abort
                    isearch-printing-char
                    keyboard-quit
                    nil))
          (ding))))
#+end_src

** Mouse

Copy test selected by the mouse to the kill ring. This was turned off
in Emacs 24.

#+begin_src emacs-lisp
(setq mouse-drag-copy-region t)
#+end_src

Scroll one line at a time with mouse

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(1))
#+end_src

** Hilight current line

Hilight the current line. To disable for a mode, add this to the mode
hook:

#+begin_src emacs-lisp :tangle
(make-local-variable 'global-hl-line-mode)
(setq global-hl-line-mode nil)
#+end_src

#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src

** Y/N answers

Enable y/n answers.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Balance windows

Balance windows horizontally automatically.

#+begin_src emacs-lisp
(defadvice split-window-below (after restore-balanace-below activate)
  (balance-windows-horizontally))

(defadvice split-window-right (after restore-balance-right activate)
  (balance-windows-horizontally))

(defadvice delete-window (after restore-balance activate)
  (balance-windows-horizontally))
#+end_src

** Disabled commands

#+begin_src emacs-lisp
(mapc (lambda (command) (put command 'disabled nil))
      '(erase-buffer
        downcase-region
        upcase-region
        upcase-initials-region))

;; Use GUI web browser if it is available
(if (executable-find "x-www-browser")
    (progn
      (setq browse-url-generic-program "x-www-browser")
      (setq browse-url-browser-function 'browse-url-generic)))

;; Do not clobber text copied from the clipboard
(setq save-interprogram-paste-before-kill t)
#+end_src

** OS X specific configuration

Turn on menu bar, since it does not use any extra space on OS X.

#+begin_src emacs-lisp
(when (eq window-system 'ns)
  (menu-bar-mode 1)
  ;; TODO: default value of epg-gpg-program is being modified to gpg.
  ;; I'm not sure why.
  (setq epg-gpg-program "gpg2")

  ;; x-popup-dialog creates a dialog that cannot be dismissed. This
  ;; does not happen with `-Q'. To reproduce, evaluate the following.
  ;;
  ;; (x-popup-dialog t '("Working" ("Yes" . t) ("No" . nil)))
  ;;
  ;; http://debbugs.gnu.org/cgi/bugreport.cgi?bug=17592
  (setq use-dialog-box nil))
#+end_src

** Programming modes

Turn on flyspell and goto-address for all text buffers.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'text-mode-hook 'goto-address-mode)
#+end_src

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'prog-mode-hook 'goto-address-prog-mode)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
#+end_src

** Auto modes

=bash-fc-*= are bash command editing temporary files (=fc= built-in).

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '(".mrconfig$"              . conf-mode))
(add-to-list 'auto-mode-alist '("/etc/network/interfaces" . conf-mode))
(add-to-list 'auto-mode-alist '("Carton\\'"               . lisp-mode))
(add-to-list 'auto-mode-alist '("bash-fc-"                . sh-mode))
#+end_src

** Lock files

http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html

Locks are created in the same directory as the file being
edited. They can be disabled as of 24.3.

http://lists.gnu.org/archive/html/emacs-devel/2011-07/msg01020.html

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

** Backup and auto-saves

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,(expand-file-name "backup/" user-emacs-directory))))
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "backup/" user-emacs-directory) t)))
#+end_src

** Revert

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Key bindings

=C-c letter= and =<F5>= through =<F9>= are reserved for user use.
Press =C-c C-h= to show all of these.

- [[info:elisp#Key Binding Conventions][Key Binding Conventions]]
- http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html

This is a copy of variable-pitch-mode modified for fixed-pitch.

#+begin_src emacs-lisp
(require 'face-remap)
(defun fixed-pitch-mode (&optional arg)
  "Fixed-pitch default-face mode.
An interface to `buffer-face-mode' which uses the `fixed-pitch' face.
Besides the choice of face, it is the same as `buffer-face-mode'."
  (interactive (list (or current-prefix-arg 'toggle)))
  (buffer-face-mode-invoke 'fixed-pitch arg
                           (called-interactively-p 'interactive)))
#+end_src

#+begin_src emacs-lisp
(bind-key "C-c d" 'my-insert-date)
(bind-key "C-c e" 'eww)
(bind-key "C-c j" 'dired-jump)
(bind-key "C-c k" 'bury-buffer)
(bind-key "C-c r" 'revert-buffer)
(bind-key "C-c t b" 'scroll-bar-mode)
(bind-key "C-c t c" 'flycheck-mode)
(bind-key "C-c t l" 'visual-line-mode)
(bind-key "C-c t m" 'menu-bar-mode)
(bind-key "C-c t n" 'linum-mode)
(bind-key "C-c t s" 'flyspell-mode)
(bind-key "C-c t t" 'toggle-truncate-lines)
(bind-key "C-c t v" 'fixed-pitch-mode)
(bind-key "C-c t w" 'whitespace-mode)
(bind-key "C-c w" 'winner-undo)
#+end_src

** Truncate lines

#+begin_src emacs-lisp
(setq-default truncate-lines t)
#+end_src

** Space as control key

Use space as control key using [[https://github.com/alols/xcape][xcape]] on Linux and [[https://pqrs.org/osx/karabiner/][Karabiner]] on OS X.

#+begin_src sh
# Map an unused modifier's keysym to the spacebar's keycode and make
# it a control modifier. It needs to be an existing key so that emacs
# won't spazz out when you press it. Hyper_L is a good candidate.
spare_modifier="Hyper_L"
xmodmap -e "keycode 65 = $spare_modifier"
xmodmap -e "remove mod4 = $spare_modifier" # hyper_l is mod4 by default
xmodmap -e "add Control = $spare_modifier"

# Map space to an unused keycode (to keep it around for xcape to use).
xmodmap -e "keycode any = space"

# Finally use xcape to cause the space bar to generate a space when
# tapped.
xcape -e "$spare_modifier=space"
#+end_src

#+begin_src emacs-lisp
(bind-key "C-x M-SPC" 'pop-global-mark)
(bind-key "M-SPC" 'set-mark-command)
(bind-key "M-s-SPC" 'mark-sexp)
(bind-key "M-s- " 'mark-sexp)           ; OS X
(bind-key "s-SPC" 'just-one-space)
#+end_src

** Other settings

Rapid mark-pop (=C-u C-SPC C-SPC...=).

#+begin_src emacs-lisp
(setq set-mark-command-repeat-pop t)
#+end_src

- Shorter auto-revert interval. Default is 5 seconds.

#+begin_src emacs-lisp
(setq auto-revert-interval 0.1)
(setq indent-tabs-mode nil)
(setq require-final-newline 'ask)
(setq sentence-end-double-space nil)
(show-paren-mode)
#+end_src

** Compile

#+begin_src emacs-lisp
(setq compilation-scroll-output 'first-error)
(defun my-colorize-compilation-buffer ()
  "Colorize a compilation mode buffer."
  (interactive)
  ;; we don't want to mess with child modes such as grep-mode, ack, ag, etc
  (when (eq major-mode 'compilation-mode)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max)))))

;; Colorize output of Compilation Mode, see
;; http://stackoverflow.com/a/3072831/355252
(require 'ansi-color)
(add-hook 'compilation-filter-hook #'my-colorize-compilation-buffer)
#+end_src

* User defined functions

Hacked version of balance-windows which only balances windows
horizontally.

#+begin_src emacs-lisp
(defun balance-windows-horizontally (&optional window-or-frame)
  "Horizontally balance the sizes of windows of WINDOW-OR-FRAME.
WINDOW-OR-FRAME is optional and defaults to the selected frame.
If WINDOW-OR-FRAME denotes a frame, balance the sizes of all
windows of that frame.  If WINDOW-OR-FRAME denotes a window,
recursively balance the sizes of all child windows of that
window."
  (interactive)
  (let* ((window
          (cond
           ((or (not window-or-frame)
                (frame-live-p window-or-frame))
            (frame-root-window window-or-frame))
           ((or (window-live-p window-or-frame)
                (window-child window-or-frame))
            window-or-frame)
           (t
            (error "Not a window or frame %s" window-or-frame))))
         (frame (window-frame window)))
    ;; ;; Balance vertically.
    ;; (window--resize-reset (window-frame window))
    ;; (balance-windows-1 window)
    ;; (when (window--resize-apply-p frame)
    ;;   (window-resize-apply frame)
    ;;   (window--pixel-to-total frame)
    ;;   (run-window-configuration-change-hook frame))
    ;; Balance horizontally.
    (window--resize-reset (window-frame window) t)
    (balance-windows-1 window t)
    (when (window--resize-apply-p frame t)
      (window-resize-apply frame t)
      (window--pixel-to-total frame t)
      (run-window-configuration-change-hook frame))))
#+end_src

#+begin_src emacs-lisp
(defun my-insert-date (arg)
  "Insert date string"
  (interactive "p")
  (cond ((= arg 1)
         (insert (format-time-string "%Y%m%d")))
        ((= arg 4)
         (insert (format-time-string "%Y%m%d%H%M%S")))
        ((= arg 16)
         (insert (format-time-string "%Y-%m-%d-%H%M%S")))))
#+end_src

#+begin_src emacs-lisp
(defun my-switch-to-term ()
  "Switch to term running in the default-directory,
otherwise start a new ansi-term"
  (interactive)
  (let (found-buffer
        (directory (expand-file-name default-directory))
        (buffers (buffer-list)))
    (while (and (not found-buffer)
                buffers)
      (with-current-buffer (car buffers)
        (when (and (string= major-mode "term-mode")
                   (string= default-directory directory))
          (setq found-buffer (car buffers)))
        (setq buffers (cdr buffers))))
    ;; If we found a term, switch to it, otherwise start a term
    (if (and found-buffer
             (not (eq found-buffer (current-buffer))))
        (switch-to-buffer found-buffer)
      (ansi-term "bash"))))
#+end_src

Work around [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug%3D17284][#17284 Host name completion in shell mode take 45 seconds]]
by disabling second while.

#+begin_src emacs-lisp
(use-package pcmpl-unix
  :config
  (defun pcmpl-ssh-known-hosts ()
    "Return a list of hosts found in `pcmpl-ssh-known-hosts-file'."
    (when (and pcmpl-ssh-known-hosts-file
	       (file-readable-p pcmpl-ssh-known-hosts-file))
      (with-temp-buffer
	(insert-file-contents-literally pcmpl-ssh-known-hosts-file)
	(let ((host-re "\\(?:\\([-.[:alnum:]]+\\)\\|\\[\\([-.[:alnum:]]+\\)\\]:[0-9]+\\)[, ]")
	      ssh-hosts-list)
	  (while (re-search-forward (concat "^ *" host-re) nil t)
	    (add-to-list 'ssh-hosts-list (concat (match-string 1)
						 (match-string 2)))
	    (while (and (eq ?, (char-before))
	                (re-search-forward host-re (line-end-position) t))
	      (add-to-list 'ssh-hosts-list (concat (match-string 1)
	                                           (match-string 2)))))
	  ssh-hosts-list)))))
#+end_src

** Alert on comint prompt

#+begin_src emacs-lisp
(require 'alert)

(defun comint-alert-on-prompt (string)
  "Send alert when prompt is detected."
  (when (let ((case-fold-search t))
          (string-match comint-prompt-regexp string))
    (alert (format "Prompt: %s" string)))
  string)

(defun comint-toggle-alert ()
  "Toggle alert on prompt for current buffer"
  (interactive)
  (make-local-variable 'comint-output-filter-functions)
  (if (member 'comint-alert-on-prompt comint-output-filter-functions)
      (remove-hook 'comint-output-filter-functions 'comint-alert-on-prompt)
    (add-hook 'comint-output-filter-functions 'comint-alert-on-prompt)))
#+end_src

* Package settings

** ace-jump

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :bind (("C-c a" . ace-jump-mode)))
#+end_src

** ace-link

#+begin_src emacs-lisp
(use-package ace-link
  :init (ace-link-setup-default))
#+end_src

** ace-window

#+begin_src emacs-lisp
(use-package ace-window
  :bind (("C-x o" . ace-window)))
#+end_src

** alert

#+begin_src emacs-lisp
(use-package alert
  :init (progn
          (setq alert-default-style
                (if (eq window-system 'ns)
                    'notifier
                  'notifications))))
#+end_src

** bash-completion

#+begin_src emacs-lisp
(use-package bash-completion
  :disabled t
  :init
  ('bash-completion-setup))
#+end_src

** bbdb

#+begin_src emacs-lisp
(use-package bbdb
  :bind (("C-c b" . bbdb))
  :config
  (progn
    (setq bbdb-file "~/.config/bbdb/.bbdb")
    (setq bbdb-auto-revert-p t)))
#+end_src

** buffer-move

#+begin_src emacs-lisp
(use-package buffer-move
  :bind (("<C-S-up>"    . buf-move-up)
         ("<C-S-down>"  . buf-move-down)
         ("<C-S-left>"  . buf-move-left)
         ("<C-S-right>" . buf-move-right)))
#+end_src

** comint-mode

Change scrolling behavior for comint modes.

#+begin_src emacs-lisp
(defun comint-mode-config()
  ;; Do not move prompt to bottom of the screen on output
  (setq comint-scroll-show-maximum-output nil)
  ;; Do not center the prompt when scrolling
  ;;
  ;; ("If the value is greater than 100, redisplay will never recenter
  ;; point, but will always scroll just enough text to bring point
  ;; into view, even if you move far away.")
  (setq-local scroll-conservatively 101)
  ;; Wrap lines (truncate-lines is turned on globally)
  (setq truncate-lines nil))

(add-hook 'comint-mode-hook 'comint-mode-config)
#+end_src

** company

#+begin_src emacs-lisp
(use-package company
  :init (global-company-mode)
  :config
  (progn
    (setq company-lighter-base "Co")
    (setq company-show-numbers t)
(setq company-minimum-prefix-length 2)))
#+end_src

** desktop

Do not load encrypted files when Emacs starts.

#+begin_src emacs-lisp
(use-package desktop
  :config
  (progn
    (defun my-shell-save-desktop-data (desktop-dirname)
      "Extra info for shell-mode buffers to be saved in the desktop file."
      (list default-directory comint-input-ring))

    (defun my-shell-restore-desktop-buffer
        (desktop-buffer-file-name desktop-buffer-name desktop-buffer-misc)
      "Restore a shell buffer's state from the desktop file."
      (let ((dir (nth 0 desktop-buffer-misc))
            (ring (nth 1 desktop-buffer-misc)))
        (when desktop-buffer-name
          (set-buffer (get-buffer-create desktop-buffer-name))
          (when dir
            (setq default-directory dir))
          (shell desktop-buffer-name)
          (when ring
            (setq comint-input-ring ring))
          (current-buffer))))

    (defun my-shell-setup-desktop ()
      "Sets up a shell buffer to have its state saved in the desktop file."
      (set (make-local-variable 'desktop-save-buffer) #'my-shell-save-desktop-data))

    (add-to-list 'desktop-buffer-mode-handlers
                 '(shell-mode . my-shell-restore-desktop-buffer))
    (add-hook 'shell-mode-hook #'my-shell-setup-desktop)

    (setq desktop-buffers-not-to-save "\\*Async Shell Command\\*")
    (setq desktop-files-not-to-save "\\(^/[^/:]*:\\|(ftp)$\\|\\.gpg$\\)"))
  :init (desktop-save-mode 1))
#+end_src

** dns-mode

#+begin_src emacs-lisp
(use-package dns-mode
  :defer t
  :config
  (progn
    ;; Do not auto increment serial (C-c C-s to increment)
    (setq dns-mode-soa-auto-increment-serial nil)))
#+end_src

** elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :defer t
  :config
  (progn
    (setq elfeed-feeds
          '("http://git-annex.branchable.com/devblog/index.atom"
            "http://planet.emacsen.org/atom.xml"
            "http://www.reddit.com/r/emacs/.rss"
            "http://www.reddit.com/r/ruby/.rss"
            "http://planet.debian.org/atom.xml"))))
#+end_src

** ensime

#+begin_src emacs-lisp
(use-package ensime
  :defer t
  :config
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook))
#+end_src

** erc

#+begin_src emacs-lisp
(use-package erc
  :defer t
  :config
  (progn
    (erc-services-mode 1)
    (erc-spelling-mode 1)

    (setq erc-hide-list '("JOIN" "MODE" "PART" "QUIT"))

    (setq bitlbee-username (password-store-get "bitlbee-username")
          bitlbee-password (password-store-get "bitlbee-password")
          freenode-username (password-store-get "freenode/username")
          freenode-password (password-store-get "freenode/password"))

    ;; Nickserv configuration
    (setq erc-prompt-for-nickserv-password nil)
    (setq erc-nickserv-passwords
          `((BitlBee ((,bitlbee-username . ,bitlbee-password)))
            ((freenode ((,freenode-username . ,freenode-password))))))))
#+end_src

** erc-track

#+begin_src emacs-lisp
(use-package erc-track
  :defer t
  :config
  (progn
    ;; Do not notify for join, part, or quit
    (add-to-list 'erc-track-exclude-types "JOIN")
    (add-to-list 'erc-track-exclude-types "PART")
    (add-to-list 'erc-track-exclude-types "QUIT")))
#+end_src

** flx-ido

Disable ido faces to see flx highlights.

#+begin_src emacs-lisp
(use-package flx-ido
  :init (flx-ido-mode 1)
  :config (setq ido-use-face nil))
#+end_src

** flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :config
  (require 'flycheck-ledger)
  (add-hook 'flycheck-mode-hook 'flycheck-cask-setup)
  (add-hook 'after-init-hook 'global-flycheck-mode))
#+end_src

** git

#+begin_src emacs-lisp
(use-package git
  :config
  (progn
    (defun my-git-clone (url)
      (interactive "sGit repository URL: ")
      (let ((git-repo "~/src"))
        (git-clone url)))))
#+end_src

** git-commit-mode

#+begin_src emacs-lisp
(use-package git-commit-mode
  :defer t
  :config
  (progn
    ;; Spell check git commit messages
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell)))
#+end_src

** gnus

Sanitized version of .authinfo.gpg for Gmail IMAP and SMTP.

#+begin_src sh :results output
gpg2 --batch -d ~/.authinfo.gpg | awk '/\.gmail\.com/{$4="EMAIL";$6="PASSWORD";print}'
#+end_src

#+RESULTS:
: machine imap.gmail.com login EMAIL password PASSWORD port imaps
: machine smtp.gmail.com login EMAIL password PASSWORD port 587

#+begin_src emacs-lisp
(use-package gnus
  :config
  (progn
    ;; Gmane
    (setq gnus-select-method
          '(nntp "news.gmane.org"))

    (add-to-list 'gnus-secondary-select-methods
                 '(nnimap "gmail"
                          (nnimap-address "imap.gmail.com")
                          (nnimap-server-port 993)
                          (nnimap-stream ssl)))

    ;; Do not take over the entire frame
    (setq gnus-use-full-window nil)

    (setq gnus-always-read-dribble-file t)

    ;; ;; Debugging
    ;; (setq imap-log t)

    (setq gnus-posting-styles
          '((".*"
             (address "svend@ciffer.net"))
            ("uw" (address "svends@uw.edu")
             ("Bcc" "svends@uw.edu"))
            ("whitepages"
             (address "ssorensen@whitepages.com"))))))
#+end_src

** gnus-alias

#+begin_src emacs-lisp
(use-package gnus-alias
  :config
  (setq gnus-alias-identity-alist
        '(("default" nil "Svend Sorensen <svend@ciffer.net>" nil nil nil)
          ("uw" nil "Svend Sorensen <svends@uw.edu>" nil (("Bcc" . "svends@uw.edu")) nil nil)
          ("wp" nil "Svend Sorensen <ssorensen@whitepages.com>" nil (("Bcc" . "ssorensen@whitepages.com")) nil nil)))
  (setq gnus-alias-default-identity "default")
  (setq gnus-alias-identity-rules
        '(("to-uw" ("any" "svends@\\(uw.edu\\|u\\.washington.edu\\|washington\\.edu\\)" both) "uw")
          ("from-uw" ("from" "@\\(uw.edu\\|u\\.washington.edu\\|washington\\.edu\\)" both) "uw"))))
#+end_src

** go-mode

- godoc (for =godoc=)
- gocode (for =go-eldoc=)
- godef (for go-mode's =godef-*= commands)
- goimports (for =gofmt-command=)
- golint (used with flycheck)

#+begin_src sh
go get code.google.com/p/go.tools/cmd/godoc
go get code.google.com/p/go.tools/cmd/goimports
go get code.google.com/p/rog-go/exp/cmd/godef
go get github.com/golang/lint/golint
go get github.com/nsf/gocode
#+end_src

#+begin_src emacs-lisp
(use-package go-mode
  :config
  (progn
    (setq gofmt-command "goimports")

    (defun my-go-mode-defaults ()
      (local-set-key (kbd "M-.") 'godef-jump)
      (set (make-local-variable 'company-backends) '(company-go))
      (add-hook 'before-save-hook 'gofmt-before-save)

      ;; El-doc for Go
      (go-eldoc-setup)

      ;; CamelCase aware editing operations
      (subword-mode +1))
    (add-hook 'go-mode-hook 'my-go-mode-defaults)))
#+end_src

** haskell

#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  (progn
    (defun my-haskell-mode-defaults ()
      (subword-mode +1)
      (turn-on-haskell-doc-mode)
      (turn-on-haskell-indentation)
      (interactive-haskell-mode +1))
    (add-hook 'haskell-mode-hook 'my-haskell-mode-defaults)))
#+end_src

** helm

#+begin_src emacs-lisp
(use-package helm
  :bind (("C-`" . helm-for-files)
         ("C-c h f" . helm-firefox-bookmarks)
         ("C-c h f" . helm-find-files)
         ("C-c h g" . helm-git-grep-from-here)
         ("C-c h p" . helm-projectile)
         ("C-c h x" . helm-M-x)))
#+end_src

** hippie-exp

[[info:autotype#Hippie%20Expand][info:autotype#Hippie Expand]]
http://www.gnu.org/software/emacs/manual/html_node/autotype/Hippie-Expand.html

#+begin_src emacs-lisp
(use-package hippie-exp
  :bind (("M-/" . hippie-expand)))
#+end_src

** ibuffer

#+begin_src emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)))

#+end_src

** ibuffer-tramp

#+begin_src emacs-lisp
(use-package ibuffer-tramp
  :config
  (progn
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-tramp-set-filter-groups-by-tramp-connection)
                (ibuffer-do-sort-by-alphabetic)))))
#+end_src

** ido

#+begin_src emacs-lisp
(use-package ido
  :init (ido-mode 1)
  :config
  (progn
    (ido-everywhere)
    (setq ido-enable-prefix nil
          ido-enable-flex-matching t
          ido-create-new-buffer 'always
          ido-use-filename-at-point 'guess
          ido-default-file-method 'selected-window
          ido-auto-merge-work-directories-length -1
          ido-use-virtual-buffers t)
    (add-to-list 'ido-ignore-buffers "\\`*tramp/")))
#+end_src

** ido-ubiquitous

#+begin_src emacs-lisp
(use-package ido-ubiquitous
  :init
  (ido-ubiquitous-mode 1))
#+end_src

** inf-ruby

#+begin_src emacs-lisp
(use-package inf-ruby
  :config
  (setq inf-ruby-default-implementation "pry"))
#+end_src

** jabber

#+begin_src emacs-lisp sh
(use-package jabber
  :config
  (progn
    (add-hook 'jabber-chat-mode-hook 'visual-line-mode)

    (add-to-list 'jabber-account-list '("23430_935967@chat.hipchat.com"))

    (defvar hipchat-number "23430")
    (defvar hipchat-nickname "Svend Sorensen")
    (defvar hipchat-rooms '("ait" "deployment_improvement" "ops" "ops-notifications" "outages" "release")
      "List of hipchat rooms to auto-join")

    (dolist (muc-room
             (mapcar (lambda (room)
                       (concat hipchat-number "_" room "@conf.hipchat.com"))
                     hipchat-rooms))
      (add-to-list 'jabber-muc-autojoin muc-room)
      (add-to-list 'jabber-muc-default-nicknames  `(,muc-room . ,hipchat-nickname)))

    (defun hipchat-join (room)
      (interactive "sRoom name: ")
      (jabber-muc-join
       (jabber-read-account)
       (concat hipchat-number "_" room "@conf.hipchat.com")
       hipchat-nickname
       t))))
#+end_src

** json-mode

Terraform state files are JSON.

#+begin_src emacs-lisp
(use-package json-mode
  :mode ("\\.tfstate\\'" "\\.tfstate\\.backup\\'"))
#+end_src

** lisp-mode

#+begin_src emacs-lisp
(use-package lisp-mode
  :config
  (add-hook 'emacs-lisp-mode-hook
            '(lambda ()
               (turn-on-eldoc-mode))))
#+end_src

** magit

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-c m" . magit-key-mode-popup-dispatch))
  :config
  (progn
    (diminish 'magit-auto-revert-mode)
    (setq magit-save-some-buffers 'dontask)
    (setq magit-repo-dirs '("~/src"))
    (add-hook 'magit-status-mode-hook 'magit-filenotify-mode)))
#+end_src

** message

#+begin_src emacs-lisp
(use-package message
  :init
  (progn
    ;; Use MSMTP with auto-smtp selection
    ;; http://www.emacswiki.org/emacs/GnusMSMTP#toc3
    ;;
    ;; 'message-sendmail-f-is-evil nil' is the default on Debian squeeze
    ;; (emacs >= 23.2+1-5)
    (setq sendmail-program "/usr/bin/msmtp"
          mail-specify-envelope-from t
          mail-envelope-from 'header
          message-sendmail-envelope-from 'header)

    ;; ;; send-mail-function's default value changed to sendmail-query-once in Emacs 24
    ;; (setq send-mail-function 'sendmail-send-it)

    ;; Internal SMTP library
    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials '(("smtp.gmail.com" 587
                                       "svend@ciffer.net" nil))
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587)

    ;; Enable gnus-alias
    (add-hook 'message-setup-hook 'gnus-alias-determine-identity)
    (define-key message-mode-map (kbd "C-c C-p") 'gnus-alias-select-identity)

    ;; Enable notmuch-address completion
    ;; (notmuch-address-message-insinuate)

    (defun my-setup-message-mode ()
      "My preferences for message mode"
      (interactive)

      ;; Enable bbdb completion
      (bbdb-insinuate-message))

    (add-hook 'message-setup-hook 'my-setup-message-mode)))
#+end_src

** notmuch

#+begin_src emacs-lisp
  (use-package notmuch
    :defer t
    :config
    (progn
      ;; notmuch-always-prompt-for-sender requires ido-mode
      ;; Add (ido-mode t) to emacs configuration
      (setq notmuch-always-prompt-for-sender t)

      ;; Use Bcc instead of Fcc
      (setq notmuch-fcc-dirs nil)

      (setq notmuch-saved-searches '(("Personal Inbox" . "tag:inbox and not tag:uw and (not tag:lists or (tag:lists::wallop_2012 or tag:lists::cheastyboys))")
                                     ("UW Inbox" . "tag:inbox and tag:uw and (not tag:lists or (tag:lists::cirg-adm or tag:lists::cirg-adm-alerts or tag:lists::cirg-core tag:lists::kenyaemr-developers)) and not (from:root or (tag:nagios and not tag:lists))")
                                     ("Action" . "tag:action")
                                     ("Waiting" . "tag:waiting")
                                     ("Secondary Lists" . "tag:inbox and (tag:lists::notmuch or tag:lists::vcs-home or tag:lists::techsupport)")
                                     ("Debian Security Inbox" . "tag:inbox and tag:lists::debian-security-announce")))

      ;; Show newest mail first
      (setq notmuch-search-oldest-first nil)

      ;; Notmuch remote setup (on all hosts except garnet)
      (when (not (string= system-name "garnet.ciffer.net"))
        (setq notmuch-command "notmuch-remote"))

      ;; Getting Things Done (GTD) keybindings

      (setq notmuch-tag-macro-alist
            (list
             '("a" "+action" "-waiting" "-inbox")
             '("w" "-action" "+waiting" "-inbox")
             '("d" "-action" "-waiting" "-inbox")))

      (defun notmuch-search-apply-tag-macro (key)
        (interactive "k")
        (let ((macro (assoc key notmuch-tag-macro-alist)))
          (notmuch-search-tag (cdr macro))))

      (defun notmuch-show-apply-tag-macro (key)
        (interactive "k")
        (let ((macro (assoc key notmuch-tag-macro-alist)))
          (notmuch-show-tag (cdr macro))))

      (define-key notmuch-search-mode-map "`" 'notmuch-search-apply-tag-macro)
      (define-key notmuch-show-mode-map "`" 'notmuch-show-apply-tag-macro)

      ;; Work around bug with notmuch and emacs-snapshot
      ;; http://notmuchmail.org/pipermail/notmuch/2012/008405.html
      (require 'gnus-art)))
#+end_src

** org

#+begin_src emacs-lisp
(use-package org
  :bind (("C-c c" . org-capture)
         ("C-c o a" . org-agenda)
         ("C-c o b" . org-iswitchb)
         ("C-c o c" . org-capture)
         ("C-c o l" . org-store-link))
  :config
  (progn
    (require 'org-capture)

    (defun org-babel-temp-file (prefix &optional suffix)
      "Create a temporary file in the `org-babel-temporary-directory'.
Passes PREFIX and SUFFIX directly to `make-temp-file' with the
value of `temporary-file-directory' temporarily set to the value
of `org-babel-temporary-directory'."
      (if (file-remote-p default-directory)
          (let ((prefix
                 (concat (file-remote-p default-directory)
                         ;; Replace temporary-file-directory with "/tmp"
                         (expand-file-name prefix "/tmp"))))
            (make-temp-file prefix nil suffix))
        (let ((temporary-file-directory
               (or (and (boundp 'org-babel-temporary-directory)
                        (file-exists-p org-babel-temporary-directory)
                        org-babel-temporary-directory)
                   temporary-file-directory)))
          (make-temp-file prefix nil suffix))))

    (add-hook 'org-mode-hook 'auto-fill-mode)
    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
    (setq org-completion-use-ido t)
    (setq org-refile-targets '((nil :maxlevel . 9)))
    (setq org-src-fontify-natively t)
    (setq org-src-preserve-indentation t)
    (setq org-use-speed-commands t)
    (setq org-capture-templates
          '(("t" "Task" entry (file "tasks.org")
             "* TODO %?\n   SCHEDULED: %T\n\n%a" :prepend t)))

    ;; Lower case all org template block headers
    (mapc (lambda (asc)
            (let ((org-sce-dc (downcase (nth 1 asc))))
              (setf (nth 1 asc) org-sce-dc)))
          org-structure-template-alist)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (perl . t)
       (python . t)
       (ruby . t)
       (scala . t)
       (sh . t)))))
#+end_src

** pdf-tools

#+begin_src sh
cd ~/.emacs.d/.cask/*/elpa/pdf-tools-*/build

zlib_CFLAGS=-I/usr/include zlib_LIBS='-L/usr/lib -lz' \
PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig \
make melpa-build
#+end_src

#+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (progn
    (add-to-list 'pdf-tools-enabled-modes 'pdf-view-auto-slice-minor-mode)
    (pdf-tools-install)))
#+end_src

** projectile

#+begin_src emacs-lisp
(use-package projectile
  :init (projectile-global-mode 1)
  :config
  (progn
    (setq projectile-use-git-grep t)
    (setq projectile-mode-line '(:eval (format " P[%s]" (projectile-project-name))))
    (projectile-cleanup-known-projects)))
#+end_src

** quickrun

#+begin_src emacs-lisp
(use-package quickrun
  :bind (("C-c q a" . quickrun-with-arg)
         ("C-c q q" . quickrun)
         ("C-c q r" . quickrun-region)
         ("C-c q s" . quickrun-shell)))
#+end_src

** recentf

#+begin_src emacs-lisp
(use-package recentf
  :init (recentf-mode 1)
  :config
  (progn
    ;; Enable recentf mode with ido-mode support
    ;;
    ;; http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/

    ;; Increase size of recent file list
    (setq recentf-max-saved-items 50)

    ;; Ignore ephemeral git commit message files
    (add-to-list 'recentf-exclude "/COMMIT_EDITMSG$")
    ;; Ignore temporary notmuch ical files
    (add-to-list 'recentf-exclude "^/tmp/notmuch-ical")

    (defun ido-recentf-open ()
      "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
          (message "Opening file...")
        (message "Aborting")))))
#+end_src

** robe

#+begin_src emacs-lisp
(use-package robe
  :config
  (progn
    (add-hook 'ruby-mode-hook 'robe-mode)))
#+end_src

** ruby-mode

Ruby auto-modes. These are from [[https://github.com/bbatsov/prelude/blob/0a1e8e4057a55ac2d17cc0cd073cc93eb7214ce8/modules/prelude-ruby.el#L39][prelude]].

#+begin_src emacs-lisp
(use-package ruby-mode
  :mode
  (("\\.rake\\'" . ruby-mode)
   ("Rakefile\\'" . ruby-mode)
   ("\\.gemspec\\'" . ruby-mode)
   ("\\.ru\\'" . ruby-mode)
   ("Gemfile\\'" . ruby-mode)
   ("Guardfile\\'" . ruby-mode)
   ("Capfile\\'" . ruby-mode)
   ("\\.thor\\'" . ruby-mode)
   ("\\.rabl\\'" . ruby-mode)
   ("Thorfile\\'" . ruby-mode)
   ("Vagrantfile\\'" . ruby-mode)
   ("\\.jbuilder\\'" . ruby-mode)
   ("Podfile\\'" . ruby-mode)
   ("\\.podspec\\'" . ruby-mode)
   ("Puppetfile\\'" . ruby-mode)
   ("Berksfile\\'" . ruby-mode)
   ("Appraisals\\'" . ruby-mode))
  :config
  (progn
    (require 'ruby-tools)
    (defun my-ruby-mode-defaults ()
      (inf-ruby-minor-mode +1)
      (ruby-tools-mode +1)
      ;; CamelCase aware editing operations
      (subword-mode +1))
    (add-hook 'ruby-mode-hook 'my-ruby-mode-defaults)))
#+end_src

** savehist

#+begin_src emacs-lisp
(use-package savehist
  :init (savehist-mode 1))
#+end_src

** saveplace

#+begin_src emacs-lisp
(use-package saveplace
  :init (setq-default save-place t))
#+end_src

** scala-mode2

Scala worksheets end in =.sc=.

#+begin_src emacs-lisp
(use-package scala-mode2
  :mode
  (("\\.sc\\'" . scala-mode))
  :config
  (progn
    (defun my-scala-mode-defaults ()
      (subword-mode +1))
    (add-hook 'scala-mode-hook 'my-scala-mode-defaults)))
#+end_src

** server

Start Emacs server unless one is already running. =server-running-p=
requires =server=.

#+begin_src emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** sh-script

#+begin_src emacs-lisp
(use-package sh-script
  :defer t
  :config
  (progn
    (defun my-setup-sh-mode ()
      "My preferences for sh-mode"
      (interactive)
      (setq sh-basic-offset 2)
      (setq sh-indentation 2)
      (setq sh-indent-for-case-alt '+)
      (setq sh-indent-for-case-label 0))

    (add-hook 'sh-mode-hook 'my-setup-sh-mode)))
#+end_src

** shell

See http://stackoverflow.com/a/11255996

#+begin_src emacs-lisp
(defun comint-fix-window-size ()
  "Change process window size."
  (when (derived-mode-p 'comint-mode)
    (let ((process (get-buffer-process (current-buffer))))
      (unless (eq nil process)
        (set-process-window-size process
                                 (window-height)
                                 ;; Adjust for columns
                                 (truncate (* 0.873 (window-width))))))))

(defun shell-mode-config ()
(define-key shell-mode-map (kbd "TAB") #'company-manual-begin)
  ;; Do not store duplicate history entries
  (setq comint-input-ignoredups t)
  ;; Remote shells lock up Emacs with projectile
  (when (tramp-tramp-file-p default-directory)
    (setq-local projectile-mode-line " P"))

  ;; ;; This seems to cause problems with bash getting into a bad
  ;; ;; "command not found" state.
  ;; ;;
  ;; ;; add this hook as buffer local, so it runs once per window.
  ;; (add-hook 'window-configuration-change-hook 'comint-fix-window-size nil t)
  ;; ;; ;; Run when shell starts, as well as when window layout change
  ;; (comint-fix-window-size)

  ;; Use sh-mode syntax table (handles single quotes, back-ticks,
  ;; etc.)
  (require 'sh-script)
  (set-syntax-table sh-mode-syntax-table))
#+end_src

#+begin_src emacs-lisp
(use-package shell
  :config
  (setq explicit-shell-file-name "bash")
  ;; Do not try to colorize comments and strings in shell mode
  (setq shell-font-lock-keywords nil)
  (add-hook 'shell-mode-hook 'goto-address-mode)
  (add-hook 'shell-mode-hook 'shell-mode-config))
#+end_src

To disable scroll to bottom:

#+begin_src emacs-lisp :tangle no
(remove-hook 'comint-output-filter-functions
             'comint-postoutput-scroll-to-bottom)
#+end_src

Changing directory generates a message with the new directory path. To
disable this:

#+begin_src emacs-lisp :tangle no
(setq shell-dirtrack-verbose nil)
#+end_src

To search history when you are at a command line using C-r (instead of
M-r):

#+begin_src emacs-lisp :tangle no
(setq comint-history-isearch dwim)
#+end_src

** slime

[[http://www.common-lisp.net/project/slime/doc/html/Installation.html#Installation][Slime Installation]]

#+begin_src emacs-lisp
(use-package slime
  :config
  (setq inferior-lisp-program "sbcl"))
#+end_src

** smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :init (progn
          (smartparens-global-mode t)
          (require 'smartparens-config)
          (sp-use-smartparens-bindings)
          (define-key sp-keymap (kbd "M-<backspace>") nil)))
#+end_src

** smex

#+begin_src emacs-lisp
(use-package smex
  :bind (("M-x" . smex)
         ("M-X" . smex-major-mode-commands)
         ("C-c M-x" . execute-extended-command)))
#+end_src

** term

#+begin_src emacs-lisp
(defun my-setup-term-mode ()
  "My preferences for term mode"
  (interactive)
  ;; Settings recommended in term.el
  ;;
  ;; http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/term.el?id=c720ef1329232c76d14a0c39daa00e37279aa818#n179
  (make-local-variable 'mouse-yank-at-point)
  (setq mouse-yank-at-point t)
  ;; End of recommended settings

  ;; Make term mode more term-like

  (define-key term-raw-map (kbd "<C-backspace>") 'term-send-raw)
  (define-key term-raw-map (kbd "<C-S-backspace>") 'term-send-raw)

  ;; Toogle between line and char mode in term-mode
  (define-key term-raw-map (kbd "C-'") 'term-line-mode)
  (define-key term-mode-map (kbd "C-'") 'term-char-mode)

  ;; Enable Emacs key bindings in term mode
  (define-key term-raw-map (kbd "M-!") nil)
  (define-key term-raw-map (kbd "M-&") nil)
  (define-key term-raw-map (kbd "M-:") nil)
  (define-key term-raw-map (kbd "M-x") nil)

  ;; Paste key bindings for Mac keyboards with no insert
  (define-key term-raw-map (kbd "C-c y") 'term-paste)
  (define-key term-raw-map (kbd "s-v") 'term-paste)

  ;; Enable address links in term mode
  (goto-address-mode))

(use-package term
  :config
  (add-hook 'term-mode-hook 'my-setup-term-mode))
#+end_src

** tramp

Edit remote files via sudo

See http://www.gnu.org/software/emacs/manual/html_node/tramp/Ad_002dhoc-multi_002dhops.html

=/ssh:example.com|sudo::/file=

Use SSH default control master settings. Add the following to
=~/.ssh/config=.

#+begin_example conf
Host *
        ControlMaster auto
        ControlPath ~/.ssh/control.%h_%p_%r
        ControlPersist 60m
#+end_example

#+begin_src emacs-lisp
(use-package tramp
  :defer t
  :config
  (progn
    (setq tramp-use-ssh-controlmaster-options nil)
    ;; Tramp sets HISTFILE to /dev/null so bash history on remote shells does not work.
    (add-to-list 'tramp-remote-process-environment "HISTFILE=")))
#+end_src

Default value of explicit-bash-args is =("--noediting" "-i")=. We want
login shell for remote hosts. This should be harmless for local
shells, however it does increase the start-up time for local shells.

Attempt to start or reattach to a dtach session and fall back to a
bash shell.

#+begin_src emacs-lisp
(setq explicit-bash-args
      '("-c" "dtach -A \"$HOME/.dtach-$(hostname -f)-ssorensen\" -z bash --noediting --login -i 2>/dev/null || bash --noediting --login -i"))
#+end_src

#+begin_src emacs-lisp
(require 'tramp)
(require 'dash)

(defun ssh-shell-hosts ()
  "Return list of known SSH hosts."
  ;; Copied from cssh.el
  (-flatten (mapcar (lambda (x)
                      (remove-if 'null (mapcar 'cadr (apply (car x) (cdr x)))))
                    (tramp-get-completion-function "ssh"))))

(defun ssh-add-user-to-hosts (&optional user)
  "Return list of known hosts prefixed with USER."
  (if (> (length user) 0)
      (mapcar (lambda (h) (format "%s@%s" user h))
              (ssh-shell-hosts))
    (ssh-shell-hosts)))

(defun ssh-host-completing-read ()
  (completing-read
   "Open ssh connection to [user@]host: "
   (completion-table-dynamic
    (lambda (str)
      (let* ((user-and-host (split-string str "@"))
             (user (if (> (length user-and-host) 1)
                       (car user-and-host)
                     nil)))
        (ssh-add-user-to-hosts user))))))

(defun ssh-shell (host)
  "Open SSH connection to HOST."
  (interactive (list (ssh-host-completing-read)))
  (let ((default-directory (format  "/ssh:%s:" host)))
    (shell (format "*shell*<%s>" host))))
#+end_src

#+begin_src emacs-lisp
(defun tramp-comint-read-input-ring ()
  "Read remote bash_history file into comint input ring."
  (when (tramp-tramp-file-p default-directory)
    (setq-local comint-input-ring-file-name (format "%s~/.bash_history" default-directory))
    (comint-read-input-ring)))

(add-hook 'shell-mode-hook 'tramp-comint-read-input-ring)
#+end_src

** winner

The winner-mode package provides a way to restore previous window
layouts.

#+begin_src emacs-lisp
(use-package winner
  :init (winner-mode))
#+end_src

** yasnippet

[[https://github.com/capitaomorte/yasnippet/issues/289]]

#+begin_src emacs-lisp
(use-package yasnippet
  :init (yas-global-mode)
  :config (progn
	    (add-hook 'term-mode-hook (lambda () (yas-minor-mode -1)))))
#+end_src

** zoom-frm

The zoom-frm package allows scaling all text. (As opposed to
text-scale-adjust, which only scale the text for a single buffer. Both
are useful.)

#+begin_src emacs-lisp
(use-package zoom-frm
  :bind (("C-c C-+" . zoom-in/out)
         ("C-c C--" . zoom-in/out)
         ("C-c C-0" . zoom-in/out)
         ("C-c C-=" . zoom-in/out)))
#+end_src

* External config

Load load config stored outside =~/.emacs.d=.

#+begin_src emacs-lisp
(when (file-exists-p "~/.emacs.d/local.el")
  (load-file "~/.emacs.d/local.el"))
#+end_src
a
