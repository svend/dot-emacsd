#+TITLE: Emacs Configuration

* User information

#+BEGIN_SRC emacs-lisp
(setq user-full-name    "Svend Sorensen")
(setq user-mail-address "svend@ciffer.net")
#+END_SRC

* Installing Emacs

Install from homebrew on OS X.

#+BEGIN_SRC sh
HOMEBREW_KEEP_INFO=1 brew reinstall emacs --HEAD --cocoa --use-git-head
rsync -a --delete /usr/local/Cellar/emacs/HEAD/Emacs.app ~/Applications
tic -o ~/.terminfo /usr/local/Cellar/emacs/HEAD/share/emacs/*/etc/e/eterm-color.ti
#+END_SRC

* Initialize Cask

#+BEGIN_SRC emacs-lisp
(require 'cask (expand-file-name "emacs-cask/cask.el" user-emacs-directory))
(cask-initialize)
#+END_SRC

* Initialize use-package

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

* Emacs UI

** Chrome

- Disable welcome screen
- Disable menu bar
- Disable scroll bar
- Disable tool bar

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

* Emacs themes

Disable current theme before loading new theme. This prevents
artifacts from the old theme.

[[https://stackoverflow.com/questions/22866733/emacs-disable-theme-after-loading-a-different-one-themes-conflict?noredirect%3D1#comment34887344_22866733][Emacs disable-theme after loading a different one (Stack Overflow)]]

#+BEGIN_SRC emacs-lisp
(defun disable-all-themes ()
  "Disable all active themes."
  (dolist (i custom-enabled-themes)
    (disable-theme i)))

(defadvice load-theme (before disable-themes-first activate)
  (disable-all-themes))
#+END_SRC

Treat all themes as safe.

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC

** tango-plus

Nice color theme with a white background.

#+BEGIN_SRC emacs-lisp
(use-package tango-plus-theme
  :init (load-theme 'tango-plus t))
#+END_SRC

** solarized

Color theme based on solarized palette.

Disable variable width fonts. Disable variable font sizes.

#+BEGIN_SRC emacs-lisp
(use-package solarized
  :init
  (progn
    (setq solarized-use-variable-pitch nil
	  solarized-height-minus-1 1.0
	  solarized-height-plus-1 1.0
	  solarized-height-plus-2 1.0
	  solarized-height-plus-3 1.0
	  solarized-height-plus-4 1.0)))
#+END_SRC

** Mode line

- Display clock in the status bar
- Display column number in mode-line (line number is displayed by
  default)

#+BEGIN_SRC emacs-lisp
(display-time-mode t)
(column-number-mode t)
#+END_SRC

Display date in 24 hour format in mode line.

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
#+END_SRC

* Emacs settings

** Mouse

Copy test selected by the mouse to the kill ring. This was turned off
in Emacs 24.

#+BEGIN_SRC emacs-lisp
(setq mouse-drag-copy-region t)
#+END_SRC

Scroll one line at a time with mouse

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1))
#+END_SRC

** Hilight current line

Hilight the current line. To disable for a mode, add this to the mode
hook:

#+BEGIN_EXAMPLE
(make-local-variable 'global-hl-line-mode)
(setq global-hl-line-mode nil)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** Y/N answers

Enable y/n answers.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Balance windows

Balance windows automatically.

#+BEGIN_SRC emacs-lisp
(defadvice split-window-below (after restore-balanace-below activate)
  (balance-windows))

(defadvice split-window-right (after restore-balance-right activate)
  (balance-windows))

(defadvice delete-window (after restore-balance activate)
  (balance-windows))
#+END_SRC

** Disabled commands

#+BEGIN_SRC emacs-lisp
(mapc (lambda (command) (put command 'disabled nil))
      '(downcase-region upcase-region upcase-initials-region))

;; Use GUI web browser if it is available
(if (executable-find "x-www-browser")
    (progn
      (setq browse-url-generic-program "x-www-browser")
      (setq browse-url-browser-function 'browse-url-generic)))

;; Do not clobber text copied from the clipboard
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** OS X specific configuration

- Turn on menu bar, since it does not use any extra space on OS X.
- Use Adobe's Source Code Pro font.

#+BEGIN_SRC emacs-lisp
(when (eq window-system 'ns)
  (menu-bar-mode 1)
  (set-face-attribute 'default nil :font "Source Code Pro" :height 140))
#+END_SRC

** Programming modes

Turn on flyspell and goto-address for all text buffers.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'text-mode-hook 'goto-address-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'prog-mode-hook 'goto-address-prog-mode)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
#+END_SRC

** Auto modes

=bash-fc-*= are bash command editing temporary files (=fc= built-in).

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '(".mrconfig$"		  . conf-mode))
(add-to-list 'auto-mode-alist '("/etc/network/interfaces" . conf-mode))
(add-to-list 'auto-mode-alist '("Carton\\'"		  . lisp-mode))
(add-to-list 'auto-mode-alist '("bash-fc-"		  . sh-mode))
#+END_SRC

** Misc

#+BEGIN_SRC emacs-lisp
(setq safe-local-variable-values '((encoding . utf-8)))
(setq require-final-newline t)
(setq sentence-end-double-space nil)
(setq history-length 10000)
(setq comint-input-ring-size 10000)
(setq-default indent-tabs-mode nil)
#+END_SRC

** Lock files

http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html

Locks are created in the same directory as the file being
edited. They can be disabled as of 24.3.

http://lists.gnu.org/archive/html/emacs-devel/2011-07/msg01020.html

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

** Backup and auto-saves

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,(expand-file-name "backup/" user-emacs-directory))))
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "backup/" user-emacs-directory) t)))
#+END_SRC

** Revert

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Key bindings

=C-c letter= and =<F5>= through =<F9>= are reserved for user use.
Press =C-c C-h= to show all of these.

- [[info:elisp#Key Binding Conventions][Key Binding Conventions]]
- http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html

#+BEGIN_SRC emacs-lisp
(bind-key "C-c a" 'align-current)
(bind-key "C-c d" 'my-insert-date)
(bind-key "C-c e" 'eww)
(bind-key "C-c f" 'flycheck-mode)
(bind-key "C-c k" 'bury-buffer)
(bind-key "C-c n" 'linum-mode)
(bind-key "C-c r" 'revert-buffer)
(bind-key "C-c s" 'toggle-truncate-lines)
(bind-key "C-c t" 'my-switch-to-term)
(bind-key "C-c w" 'whitespace-mode)
#+END_SRC

* User defined functions

#+BEGIN_SRC emacs-lisp
(defun my-insert-date ()
  "Insert date string"
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S")))

(defun my-switch-to-term ()
  "Switch to term running in the default-directory,
otherwise start a new ansi-term"
  (interactive)
  (let (found-buffer
	(directory (expand-file-name default-directory))
	(buffers (buffer-list)))
    (while (and (not found-buffer)
		buffers)
      (with-current-buffer (car buffers)
	(when (and (string= major-mode "term-mode")
		   (string= default-directory directory))
	  (setq found-buffer (car buffers)))
	(setq buffers (cdr buffers))))
    ;; If we found a term, switch to it, otherwise start a term
    (if (and found-buffer
	     (not (eq found-buffer (current-buffer))))
	(switch-to-buffer found-buffer)
      (ansi-term "bash"))))
#+END_SRC

* Package settings

** ace-window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("C-x o" . ace-window)))
#+END_SRC

** bash-completion

#+BEGIN_SRC emacs-lisp
(use-package bash-completion
  :disabled t
  :init
  ('bash-completion-setup))
#+END_SRC

** bbdb

#+BEGIN_SRC emacs-lisp
(use-package bbdb
  :bind (("C-c b" . bbdb))
  :config
  (progn
    (setq bbdb-file "~/.config/bbdb/.bbdb")
    (setq bbdb-auto-revert-p t)))
#+END_SRC

** buffer-move

#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind (("<C-S-up>"    . buf-move-up)
	 ("<C-S-down>"  . buf-move-down)
	 ("<C-S-left>"  . buf-move-left)
	 ("<C-S-right>" . buf-move-right)))
#+END_SRC

** desktop

#+BEGIN_SRC emacs-lisp
(use-package desktop
  :init (desktop-save-mode 1))
#+END_SRC

** dns-mode

#+BEGIN_SRC emacs-lisp
(use-package dns-mode
  :defer t
  :config
  (progn
    ;; Do not auto increment serial (C-c C-s to increment)
    (setq dns-mode-soa-auto-increment-serial nil)))
#+END_SRC

** elfeed

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :defer t
  :config
  (progn
    (setq elfeed-feeds
	  '("http://git-annex.branchable.com/devblog/index.atom"
	    "http://planet.emacsen.org/atom.xml"
	    "http://www.reddit.com/r/emacs/.rss"
	    "http://www.reddit.com/r/ruby/.rss"
	    "http://planet.debian.org/atom.xml"))))
#+END_SRC

** erc

#+BEGIN_SRC emacs-lisp
  (use-package erc
    :defer t
    :config
    (progn
      (erc-services-mode 1)
      (erc-spelling-mode 1)

      (setq erc-hide-list '("JOIN" "MODE" "PART" "QUIT"))

      (setq bitlbee-username (password-store-get "bitlbee-username")
	    bitlbee-password (password-store-get "bitlbee-password")
	    freenode-username (password-store-get "freenode/username")
	    freenode-password (password-store-get "freenode/password"))

      ;; Nickserv configuration
      (setq erc-prompt-for-nickserv-password nil)
      (setq erc-nickserv-passwords
	    `((BitlBee ((,bitlbee-username . ,bitlbee-password)))
	      ((freenode ((,freenode-username . ,freenode-password))))))))
#+END_SRC

** erc-track

#+BEGIN_SRC emacs-lisp
(use-package erc-track
  :defer t
  :config
  (progn
    ;; Do not notify for join, part, or quit
    (add-to-list 'erc-track-exclude-types "JOIN")
    (add-to-list 'erc-track-exclude-types "PART")
    (add-to-list 'erc-track-exclude-types "QUIT")))
#+END_SRC

** exec-path-from-shell

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (eq window-system 'ns)
  :init
  (progn
    (mapc
     (lambda (variable)
       (add-to-list 'exec-path-from-shell-variables variable))
     '("ALTERNATE_EDITOR" "EDITOR" "GPG_AGENT_INFO" "HISTSIZE" "INFOPATH" "LANG" "LC_ALL" "SSH_AUTH_SOCK"))
    (exec-path-from-shell-initialize)))
#+END_SRC

** flx-ido

#+BEGIN_SRC emacs-lisp
(use-package flx-ido
  :init (flx-ido-mode 1)
  :config (setq ido-use-face nil))
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (require 'flycheck-ledger)
  (add-hook 'flycheck-mode-hook 'flycheck-cask-setup)
  (add-hook 'after-init-hook 'global-flycheck-mode))
#+END_SRC

** git

#+BEGIN_SRC emacs-lisp
(use-package git
  :config
  (progn
    (defun my-git-clone (url)
      (interactive "sGit repository URL: ")
      (let ((git-repo "~/src"))
        (git-clone url)))))
#+END_SRC

** git-commit-mode

#+BEGIN_SRC emacs-lisp
(use-package git-commit-mode
  :defer t
  :config
  (progn
    ;; Spell check git commit messages
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell)))
#+END_SRC

** gnus

#+BEGIN_SRC emacs-lisp
(use-package gnus
  :config
  (progn
    ;; Gmane
    (setq gnus-select-method
          '(nntp "news.gmane.org"))

    ;; Do not take over the entire frame
    (setq gnus-use-full-window nil)

    (setq gnus-always-read-dribble-file t)

    ;; ;; Debugging
    ;; (setq imap-log t)

    (setq gnus-posting-styles
          '((".*"
             (address "svend@ciffer.net"))
            ("uw"
             (address "svends@uw.edu")
             ("Bcc" "svends@uw.edu"))))))
#+END_SRC

** gnus-alias

#+BEGIN_SRC emacs-lisp
(use-package gnus-alias
  :config
  (setq gnus-alias-identity-alist
	'(("default" nil "Svend Sorensen <svend@ciffer.net>" nil nil nil)
	  ("uw" nil "Svend Sorensen <svends@uw.edu>" nil (("Bcc" . "svends@uw.edu")) nil nil)))
  (setq gnus-alias-default-identity "default")
  (setq gnus-alias-identity-rules
	'(("to-uw" ("any" "svends@\\(uw.edu\\|u\\.washington.edu\\|washington\\.edu\\)" both) "uw")
	  ("from-uw" ("from" "@\\(uw.edu\\|u\\.washington.edu\\|washington\\.edu\\)" both) "uw"))))
#+END_SRC

** helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :bind (("C-`" . helm-for-files)
	 ("C-c h f" . helm-firefox-bookmarks)
	 ("C-c h f" . helm-find-files)
	 ("C-c h g" . helm-git-grep-from-here)
	 ("C-c h p" . helm-projectile)
	 ("C-c h x" . helm-M-x))
  :config
  (progn
    (require 'helm-ls-git)
    (add-to-list 'helm-for-files-preferred-list 'helm-source-ls-git t)
    (delete 'helm-source-locate helm-for-files-preferred-list)
    (helm-attrset 'follow 1 helm-source-buffers-list)

    (helm-adaptative-mode 1)))
#+END_SRC

** hippie-exp

[[info:autotype#Hippie%20Expand][info:autotype#Hippie Expand]]
http://www.gnu.org/software/emacs/manual/html_node/autotype/Hippie-Expand.html

#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :bind (("M-/" . hippie-expand)))
#+END_SRC

** ido

#+BEGIN_SRC emacs-lisp
(use-package ido
  :init (ido-mode 1)
  :config
  (progn
    (setq ido-enable-prefix nil
	  ido-enable-flex-matching t
	  ido-everywhere t
	  ido-create-new-buffer 'always
	  ido-use-filename-at-point 'guess
	  ido-max-prospects 10
	  ido-default-file-method 'selected-window
	  ido-auto-merge-work-directories-length -1
	  ido-use-virtual-buffers t)))
#+END_SRC

** ido-ubiquitous

#+BEGIN_SRC emacs-lisp
(use-package ido-ubiquitous
  :init
  (ido-ubiquitous-mode 1))
#+END_SRC

** lisp-mode

#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :config
  (add-hook 'emacs-lisp-mode-hook
	    '(lambda ()
	       (turn-on-eldoc-mode))))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-c m b" . magit-blame-mode)
         ("C-c m l" . magit-log)
	 ("C-c m m" . magit-status)
	 ("C-c m r" . vc-revert)))
#+END_SRC

** message

#+BEGIN_SRC emacs-lisp
(use-package message
  :init
  (progn
    ;; Use MSMTP with auto-smtp selection
    ;; http://www.emacswiki.org/emacs/GnusMSMTP#toc3
    ;;
    ;; 'message-sendmail-f-is-evil nil' is the default on Debian squeeze
    ;; (emacs >= 23.2+1-5)
    (setq sendmail-program "/usr/bin/msmtp"
	  mail-specify-envelope-from t
	  mail-envelope-from 'header
	  message-sendmail-envelope-from 'header)

    ;; send-mail-function's default value changed to sendmail-query-once in Emacs 24
    (setq send-mail-function 'sendmail-send-it)

    ;; Enable gnus-alias
    (add-hook 'message-setup-hook 'gnus-alias-determine-identity)
    (define-key message-mode-map (kbd "C-c C-p") 'gnus-alias-select-identity)

    ;; Enable notmuch-address completion
    ;; (notmuch-address-message-insinuate)

    (defun my-setup-message-mode ()
      "My preferences for message mode"
      (interactive)

      ;; Enable bbdb completion
      (bbdb-insinuate-message)

      ;; Bind C-M-j to message-newline-and-reformat
      ;;
      ;; Gnome terminal seems to translate M-RET to C-M-j. The GUI shouldn't
      ;; have this problem.
      (if window-system
	  nil
	(progn
	  (define-key message-mode-map "\C-\M-j" 'message-newline-and-reformat))))

    (add-hook 'message-setup-hook 'my-setup-message-mode)))
#+END_SRC

** notmuch

#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :defer t
    :config
    (progn
      ;; notmuch-always-prompt-for-sender requires ido-mode
      ;; Add (ido-mode t) to emacs configuration
      (setq notmuch-always-prompt-for-sender t)

      ;; Use Bcc instead of Fcc
      (setq notmuch-fcc-dirs nil)

      (setq notmuch-saved-searches '(("Personal Inbox" . "tag:inbox and not tag:uw and (not tag:lists or (tag:lists::wallop_2012 or tag:lists::cheastyboys))")
				     ("UW Inbox" . "tag:inbox and tag:uw and (not tag:lists or (tag:lists::cirg-adm or tag:lists::cirg-adm-alerts or tag:lists::cirg-core tag:lists::kenyaemr-developers)) and not (from:root or (tag:nagios and not tag:lists))")
				     ("Action" . "tag:action")
				     ("Waiting" . "tag:waiting")
				     ("Secondary Lists" . "tag:inbox and (tag:lists::notmuch or tag:lists::vcs-home or tag:lists::techsupport)")
				     ("Debian Security Inbox" . "tag:inbox and tag:lists::debian-security-announce")))

      ;; Show newest mail first
      (setq notmuch-search-oldest-first nil)

      ;; Notmuch remote setup (on all hosts except garnet)
      (when (not (string= system-name "garnet.ciffer.net"))
	(setq notmuch-command "notmuch-remote"))

      ;; Getting Things Done (GTD) keybindings

      (setq notmuch-tag-macro-alist
	    (list
	     '("a" "+action" "-waiting" "-inbox")
	     '("w" "-action" "+waiting" "-inbox")
	     '("d" "-action" "-waiting" "-inbox")))

      (defun notmuch-search-apply-tag-macro (key)
	(interactive "k")
	(let ((macro (assoc key notmuch-tag-macro-alist)))
	  (notmuch-search-tag (cdr macro))))

      (defun notmuch-show-apply-tag-macro (key)
	(interactive "k")
	(let ((macro (assoc key notmuch-tag-macro-alist)))
	  (notmuch-show-tag (cdr macro))))

      (define-key notmuch-search-mode-map "`" 'notmuch-search-apply-tag-macro)
      (define-key notmuch-show-mode-map "`" 'notmuch-show-apply-tag-macro)

      ;; Work around bug with notmuch and emacs-snapshot
      ;; http://notmuchmail.org/pipermail/notmuch/2012/008405.html
      (require 'gnus-art)))
#+END_SRC

** org

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (("C-c o a" . org-agenda)
         ("C-c o b" . org-iswitchb)
         ("C-c o c" . org-capture)
         ("C-c o l" . org-store-link)
         ("C-c o r" . org-remember))
  :config
  (progn
    (add-hook 'org-mode-hook 'auto-fill-mode)
    (setq org-replace-disputed-keys t)
    (setq org-src-fontify-natively t)
    (setq org-src-preserve-indentation t)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((perl . t)
       (ruby . t)
       (sh . t)
       (python . t)
       (emacs-lisp . t)))))
#+END_SRC

** projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init (projectile-global-mode 1)
  :config
  (progn
    (setq projectile-switch-project-action 'projectile-vc)
    (setq projectile-use-git-grep t)
    (add-hook 'after-change-major-mode-hook 'projectile-update-mode-line)))
#+END_SRC

** recentf

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :init (recentf-mode 1)
  :config
  (progn
    ;; Enable recentf mode with ido-mode support
    ;;
    ;; http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/

    ;; Increase size of recent file list
    (setq recentf-max-saved-items 50)

    ;; Ignore ephemeral git commit message files
    (add-to-list 'recentf-exclude "/COMMIT_EDITMSG$")
    ;; Ignore temporary notmuch ical files
    (add-to-list 'recentf-exclude "^/tmp/notmuch-ical")

    (defun ido-recentf-open ()
      "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
	  (message "Opening file...")
	(message "Aborting")))))
#+END_SRC

** scala-mode2

Scala worksheets end in =.sc=.

#+BEGIN_SRC emacs-lisp
(use-package scala-mode2
  :mode
  (("\\.sc\\'" . scala-mode)))
#+END_SRC

** ruby-mode

Ruby auto-modes. These are from [[https://github.com/bbatsov/prelude/blob/0a1e8e4057a55ac2d17cc0cd073cc93eb7214ce8/modules/prelude-ruby.el#L39][prelude]].

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :config
  (progn
    (setq ruby-align-to-stmt-keywords t))
  :mode
  (("\\.rake\\'"     . ruby-mode)
   ("Rakefile\\'"    . ruby-mode)
   ("\\.gemspec\\'"  . ruby-mode)
   ("\\.ru\\'"	     . ruby-mode)
   ("Gemfile\\'"     . ruby-mode)
   ("Guardfile\\'"   . ruby-mode)
   ("Capfile\\'"     . ruby-mode)
   ("\\.thor\\'"     . ruby-mode)
   ("Thorfile\\'"    . ruby-mode)
   ("Vagrantfile\\'" . ruby-mode)
   ("\\.jbuilder\\'" . ruby-mode)))
#+END_SRC

** savehist

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init (savehist-mode 1))
#+END_SRC
** server

Start Emacs server unless one is already running. =server-running-p=
requires =server=.

#+BEGIN_SRC emacs-lisp
(use-package server
  :init
  (unless (server-running-p)
    (server-start)))
#+END_SRC

** sh-script

#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :defer t
  :config
  (progn
    (defun my-setup-sh-mode ()
      "My preferences for sh-mode"
      (interactive)
      (setq sh-basic-offset 2)
      (setq sh-indentation 2)
      (setq sh-indent-for-case-alt '+)
      (setq sh-indent-for-case-label 0))

    (add-hook 'sh-mode-hook 'my-setup-sh-mode)))
#+END_SRC

** shell

#+BEGIN_SRC emacs-lisp
(use-package shell
  :config
  (add-hook 'shell-mode-hook 'goto-address-mode))
#+END_SRC

** slime

[[http://www.common-lisp.net/project/slime/doc/html/Installation.html#Installation][Slime Installation]]

#+BEGIN_SRC emacs-lisp
(use-package slime
  :config
  (setq inferior-lisp-program "sbcl"))
#+END_SRC

** smex

#+BEGIN_SRC emacs-lisp
(use-package smex
  :bind (("M-x" . smex)
	 ("M-X" . smex-major-mode-commands)
	 ("C-c M-x" . execute-extended-command)))
#+END_SRC

** term

#+BEGIN_SRC emacs-lisp
(defun my-setup-term-mode ()
  "My preferences for term mode"
  (interactive)
  ;; Settings recommended in term.el
  ;;
  ;; http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/term.el?id=c720ef1329232c76d14a0c39daa00e37279aa818#n179
  (make-local-variable 'mouse-yank-at-point)
  (setq mouse-yank-at-point t)
  ;; End of recommended settings

  ;; Disable hl-line-mode in term buffers
  (make-local-variable 'global-hl-line-mode)
  (setq global-hl-line-mode nil)

  ;; Make term mode more term-like

  (define-key term-raw-map (kbd "<C-backspace>") 'term-send-raw)
  (define-key term-raw-map (kbd "<C-S-backspace>") 'term-send-raw)

  ;; Toogle between line and char mode in term-mode
  (define-key term-raw-map (kbd "C-'") 'term-line-mode)
  (define-key term-mode-map (kbd "C-'") 'term-char-mode)

  ;; Enable Emacs key bindings in term mode
  (define-key term-raw-map (kbd "M-!") nil)
  (define-key term-raw-map (kbd "M-&") nil)
  (define-key term-raw-map (kbd "M-:") nil)
  (define-key term-raw-map (kbd "M-x") nil)

  ;; Paste key bindings for Mac keyboards with no insert
  (define-key term-raw-map (kbd "C-c y") 'term-paste)
  (define-key term-raw-map (kbd "s-v") 'term-paste)

  ;; Enable address links in term mode
  (goto-address-mode))

(use-package term
  :config
  (add-hook 'term-mode-hook 'my-setup-term-mode))
#+END_SRC

** tramp

Edit remote files via sudo

See http://www.gnu.org/software/emacs/manual/html_node/tramp/Ad_002dhoc-multi_002dhops.html

=/ssh:example.com|sudo:localhost:/file=

Use SSH default control master settings. Add the following to
=~/.ssh/config=.

#+BEGIN_EXAMPLE conf
Host *
	ControlMaster auto
	ControlPath ~/.ssh/control.%h_%p_%r
	ControlPersist 60m
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :defer t
  :config
  (progn
    (setq tramp-use-ssh-controlmaster-options nil)


    ;; Use warning font in modeline when working as root
    ;;
    ;; http://www.gnu.org/software/emacs/manual/html_mono/tramp.html#Frequently-Asked-Questions
    ;; (I'ld like to get a Visual Warning when working in a sudo:ed
    ;; context)
    ;;
    (defun my-mode-line-warn-when-root ()
      (when (string-match "^/su\\(do\\)?:" default-directory)
	(setq mode-line-format
	      (format-mode-line mode-line-format 'font-lock-warning-face))))
    (add-hook 'find-file-hooks 'my-mode-line-warn-when-root)
    (add-hook 'dired-mode-hook 'my-mode-line-warn-when-root)))
#+END_SRC

** winner

#+BEGIN_SRC emacs-lisp
(use-package winner
  :init (winner-mode 1))
#+END_SRC

** zoom-frm

#+BEGIN_SRC emacs-lisp
(use-package zoom-frm
  :bind (("C-c C-+" . zoom-in/out)
	 ("C-c C--" . zoom-in/out)
	 ("C-c C-0" . zoom-in/out)
	 ("C-c C-=" . zoom-in/out)))
#+END_SRC
