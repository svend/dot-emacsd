* Emacs configuration

** User information

#+BEGIN_SRC emacs-lisp
(setq user-full-name    "Svend Sorensen")
(setq user-mail-address "svend@ciffer.net")
#+END_SRC

** Installing Emacs

Install from homebrew on OS X.

#+BEGIN_SRC sh
HOMEBREW_KEEP_INFO=1 brew reinstall emacs --HEAD --cocoa --use-git-head
rsync -a --delete /usr/local/Cellar/emacs/HEAD/Emacs.app ~/Applications
tic -o ~/.terminfo /usr/local/share/emacs/24.3.50/etc/e/eterm-color.ti
#+END_SRC

** Initialize Cask

#+BEGIN_SRC emacs-lisp
(require 'cask (expand-file-name "emacs-cask/cask.el" user-emacs-directory))
(cask-initialize)
#+END_SRC

** UI

#+BEGIN_SRC emacs-lisp
(setq safe-local-variable-values '((encoding . utf-8)))
(setq require-final-newline t)
(setq sentence-end-double-space nil)
(setq history-length 10000)
#+END_SRC

*** Mouse

Copy test selected by the mouse to the kill ring. This was turned off
in Emacs 24.

#+BEGIN_SRC emacs-lisp
(setq mouse-drag-copy-region t)
#+END_SRC

Scroll one line at a time with mouse

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1))
#+END_SRC

*** Mode line

- Display clock in the status bar
- Display column number in mode-line (line number is displayed by default)

#+BEGIN_SRC emacs-lisp
(display-time-mode t)
(column-number-mode t)
#+END_SRC

Display date in 24 hour format in mode line.

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
#+END_SRC

*** Hilight current line

Hilight the current line. To disable for a mode, add this to the mode
hook:

#+BEGIN_EXAMPLE
(make-local-variable 'global-hl-line-mode)
(setq global-hl-line-mode nil)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

*** Chrome

- Disable welcome screen
- Disable menu bar
- Disable scroll bar
- Disable tool bar

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tool-bar-mode 0)
#+END_SRC

*** Y/N answers

Enable y/n answers.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Themes

Treat all themes as safe.

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC

Solarized light theme.

Disable variable width fonts. Disable variable font sizes.

#+BEGIN_SRC emacs-lisp
(setq solarized-use-variable-pitch nil)
(setq solarized-height-minus-1 1.0)
(setq solarized-height-plus-1 1.0)
(setq solarized-height-plus-2 1.0)
(setq solarized-height-plus-3 1.0)
(setq solarized-height-plus-4 1.0)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(load-theme 'solarized-light t)
#+END_SRC

*** Balance windows

Balance windows automatically.

#+BEGIN_SRC emacs-lisp
(defadvice split-window-below (after restore-balanace-below activate)
  (balance-windows))

(defadvice split-window-right (after restore-balance-right activate)
  (balance-windows))

(defadvice delete-window (after restore-balance activate)
  (balance-windows))
#+END_SRC

*** Disabled commands

#+BEGIN_SRC emacs-lisp
(mapc (lambda (command) (put command 'disabled nil))
      '(downcase-region upcase-region upcase-initials-region))

;; Use GUI web browser if it is available
(if (executable-find "x-www-browser")
    (progn
      (setq browse-url-generic-program "x-www-browser")
      (setq browse-url-browser-function 'browse-url-generic)))

;; Do not clobber text copied from the clipboard
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** Key bindings

*** User-reserved key bindings

=C-c letter= and =<F5>= through =<F9>= are reserved for user use.
Press =C-c C-h= to show all of these.

- [[info:elisp#Key Binding Conventions][Key Binding Conventions]]
- http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a")   'align-current)
(global-set-key (kbd "C-c b")   'bbdb)
(global-set-key (kbd "C-c d")   'my-insert-date)
(global-set-key (kbd "C-c e")   'eww)
(global-set-key (kbd "C-c f")   'flycheck-mode)
(global-set-key (kbd "C-c h f") 'helm-firefox-bookmarks)
(global-set-key (kbd "C-c h f") 'helm-find-files)
(global-set-key (kbd "C-c h g") 'helm-git-grep-from-here)
(global-set-key (kbd "C-c h p") 'helm-projectile)
(global-set-key (kbd "C-c h x") 'helm-M-x)
(global-set-key (kbd "C-c k")   'kill-this-buffer)
(global-set-key (kbd "C-c m")   'magit-status)
(global-set-key (kbd "C-c n")   'linum-mode)
(global-set-key (kbd "C-c o a") 'org-agenda)
(global-set-key (kbd "C-c o b") 'org-iswitchb)
(global-set-key (kbd "C-c o c") 'org-capture)
(global-set-key (kbd "C-c o l") 'org-store-link)
(global-set-key (kbd "C-c o r") 'org-remember)
(global-set-key (kbd "C-c r")   'revert-buffer)
(global-set-key (kbd "C-c s")   'toggle-truncate-lines)
(global-set-key (kbd "C-c t")   'my-switch-to-term)
(global-set-key (kbd "C-c w")   'whitespace-mode)
#+END_SRC

*** Non-reserved key bindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-`")         'helm-for-files)

; buffer-move
(global-set-key (kbd "<C-S-up>")    'buf-move-up)
(global-set-key (kbd "<C-S-down>")  'buf-move-down)
(global-set-key (kbd "<C-S-left>")  'buf-move-left)
(global-set-key (kbd "<C-S-right>") 'buf-move-right)

(global-set-key (kbd "M-x")	    'smex)
(global-set-key (kbd "M-X")	    'smex-major-mode-commands)
#+END_SRC

** Emacs global modes

#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
(savehist-mode 1)
#+END_SRC

** Emacs temporary files

*** Lock files

http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html

Locks are created in the same directory as the file being
edited. They can be disabled as of 24.3.

http://lists.gnu.org/archive/html/emacs-devel/2011-07/msg01020.html

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

*** Backup and auto-saves

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,(expand-file-name "backup/" user-emacs-directory))))
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "backup/" user-emacs-directory) t)))
#+END_SRC

** User defined functions

#+BEGIN_SRC emacs-lisp
(defun my-insert-date ()
  "Insert date string"
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S")))

(defun my-switch-to-term ()
  "Switch to term running in the default-directory,
otherwise start a new ansi-term"
  (interactive)
  (let (found-buffer
	(directory (expand-file-name default-directory))
	(buffers (buffer-list)))
    (while (and (not found-buffer)
		buffers)
      (with-current-buffer (car buffers)
	(when (and (string= major-mode "term-mode")
		   (string= default-directory directory))
	  (setq found-buffer (car buffers)))
	(setq buffers (cdr buffers))))
    ;; If we found a term, switch to it, otherwise start a term
    (if (and found-buffer
	     (not (eq found-buffer (current-buffer))))
	(switch-to-buffer found-buffer)
      (ansi-term "bash"))))
#+END_SRC

** OS X specific configuration

- Turn on menu bar, since it does not use any extra space on OS X.
- Use Adobe's Source Code Pro font.

#+BEGIN_SRC emacs-lisp
(when (eq window-system 'ns)
  (menu-bar-mode 1)
  (set-face-attribute 'default nil :font "Source Code Pro" :height 140))
#+END_SRC

** Auto modes

=bash-fc-*= are bash command editing temporary files (=fc= built-in).

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '(".mrconfig$"		  . conf-mode))
(add-to-list 'auto-mode-alist '("/etc/network/interfaces" . conf-mode))
(add-to-list 'auto-mode-alist '("Carton\\'"		  . lisp-mode))
(add-to-list 'auto-mode-alist '("bash-fc-"		  . sh-mode))
#+END_SRC

** Programming modes

Turn on flyspell and goto-address for all text buffers.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'text-mode-hook 'goto-address-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'prog-mode-hook 'goto-address-prog-mode)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
#+END_SRC

** Package settings

*** 00 use-package

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

*** bash-completion

#+BEGIN_SRC emacs-lisp
(use-package bash-completion
  :disabled t
  :init
  ('bash-completion-setup))
#+END_SRC

*** bbdb

#+BEGIN_SRC emacs-lisp
(setq bbdb-file "~/.config/bbdb/.bbdb")
(setq bbdb-auto-revert-p t)
#+END_SRC

*** dns-mode

#+BEGIN_SRC emacs-lisp
;; Do not auto increment serial (C-c C-s to increment)
(setq dns-mode-soa-auto-increment-serial nil)
#+END_SRC

*** elfeed

#+BEGIN_SRC emacs-lisp
(setq elfeed-feeds
      '("http://git-annex.branchable.com/devblog/index.atom"
	"http://planet.emacsen.org/atom.xml"
	"http://www.reddit.com/r/emacs/.rss"
	"http://www.reddit.com/r/ruby/.rss"
	"http://planet.debian.org/atom.xml"))
#+END_SRC

*** erc

#+BEGIN_SRC emacs-lisp
(use-package erc
  :init
  (progn
    (erc-services-mode 1)
    (erc-spelling-mode 1)

    (setq erc-hide-list '("JOIN" "MODE" "PART" "QUIT"))

    (setq bitlbee-username (password-store-get "bitlbee-username")
	  bitlbee-password (password-store-get "bitlbee-password")
	  freenode-username (password-store-get "freenode/username")
	  freenode-password (password-store-get "freenode/password"))

    ;; Nickserv configuration
    (setq erc-prompt-for-nickserv-password nil)
    (setq erc-nickserv-passwords
	  `((BitlBee ((,bitlbee-username . ,bitlbee-password)))
	    ((freenode ((,freenode-username . ,freenode-password))))))))
#+END_SRC

*** erc-track

#+BEGIN_SRC emacs-lisp
;; Do not notify for join, part, or quit
(add-to-list 'erc-track-exclude-types "JOIN")
(add-to-list 'erc-track-exclude-types "PART")
(add-to-list 'erc-track-exclude-types "QUIT")
#+END_SRC

*** exec-path-from-shell

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (eq window-system 'ns)
  :init
  (progn
    (mapc
     (lambda (variable)
       (add-to-list 'exec-path-from-shell-variables variable))
     '("ALTERNATE_EDITOR" "EDITOR" "GPG_AGENT_INFO" "INFOPATH" "LANG" "LC_ALL" "SSH_AUTH_SOCK"))
    (exec-path-from-shell-initialize)))
#+END_SRC

*** flx-ido

#+BEGIN_SRC emacs-lisp
(use-package flx-ido
  :init (flx-ido-mode 1)
  :config (setq ido-use-face nil))
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (require 'flycheck-ledger)
  (add-hook 'after-init-hook 'global-flycheck-mode))
#+END_SRC

*** git-commit-mode

#+BEGIN_SRC emacs-lisp
;; Spell check git commit messages
(add-hook 'git-commit-mode-hook 'turn-on-flyspell)
#+END_SRC

*** gnus

#+BEGIN_SRC emacs-lisp
;; Gmane
(setq gnus-select-method
      '(nntp "news.gmane.org"))

;; Debugging
;; (setq imap-log t)

;; Other accounts, including IMAP
(setq gnus-secondary-select-methods
      '((nnimap "uw"
		(nnimap-address "svends.deskmail.washington.edu")
		(nnimap-server-port 993)
		(nnimap-stream ssl)
		;; This doesn't work
		;; (nnimap-authenticator gssapi)
		(nnimap-authenticator login)
		;; TODO: Playing it safe. Is this required?
		(nnimap-expunge-on-close 'never)
		(nnimap-list-pattern ("INBOX" "mail/*")))))

(setq gnus-posting-styles
      '((".*"
	 (address "svend@ciffer.net"))
	("uw"
	 (address "svends@uw.edu")
	 ("Bcc" "svends@uw.edu"))))
#+END_SRC

*** gnus-alias

#+BEGIN_SRC emacs-lisp
(setq gnus-alias-identity-alist
      '(("default" nil "Svend Sorensen <svend@ciffer.net>" nil nil nil)
	("uw" nil "Svend Sorensen <svends@uw.edu>" nil (("Bcc" . "svends@uw.edu")) nil nil)))
(setq gnus-alias-default-identity "default")
(setq gnus-alias-identity-rules
      '(("to-uw" ("any" "svends@\\(uw.edu\\|u\\.washington.edu\\|washington\\.edu\\)" both) "uw")
	("from-uw" ("from" "@\\(uw.edu\\|u\\.washington.edu\\|washington\\.edu\\)" both) "uw")))
#+END_SRC

*** helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :init
  (progn
    (require 'helm-ls-git)
    (add-to-list 'helm-for-files-preferred-list 'helm-source-ls-git t)
    (delete 'helm-source-locate helm-for-files-preferred-list)
    (helm-attrset 'follow 1 helm-source-buffers-list)

    (helm-adaptative-mode 1)))
#+END_SRC

*** ibuffer

#+BEGIN_SRC emacs-lisp
;; Define ibuffer groups
(setq ibuffer-saved-filter-groups
      '(("default"
	 ("irc" (mode . erc-mode))
	 ("mail" (or
		  (mode . message-mode)
		  (mode . gnus-article-mode)
		  (mode . gnus-browse-mode)
		  (mode . gnus-group-mode)
		  (mode . gnus-server-mode)
		  (mode . gnus-summary-mode)
		  (mode . notmuch-hello-mode)
		  (mode . notmuch-search-mode)
		  (mode . notmuch-show-mode)
		  (name . "\*[Nn]otmuch")))
	 )))

;; Hide empty groups
(setq ibuffer-show-empty-filter-groups nil)

(defun ibuffer-tramp-add-tramp-filter-groups ()
  (interactive)
  (dolist (group (ibuffer-tramp-generate-filter-groups-by-tramp-connection))
    (add-to-list 'ibuffer-filter-groups group t)))

(defun ibuffer-vc-add-vc-filter-groups ()
  (interactive)
  (dolist (group (ibuffer-vc-generate-filter-groups-by-vc-root))
    (add-to-list 'ibuffer-filter-groups group t)))

(defun my-setup-ibuffer-mode ()
  "My preferences for ibuffer mode"
  (interactive)
  (ibuffer-switch-to-saved-filter-groups "default")

  ;; Add ibuffer-vc filter groups and update list
  (ibuffer-tramp-add-tramp-filter-groups)
  (ibuffer-vc-add-vc-filter-groups)
  (ibuffer-update nil t))

(add-hook 'ibuffer-hook 'my-setup-ibuffer-mode)
#+END_SRC

*** ido

#+BEGIN_SRC emacs-lisp
(use-package ido
  :init (ido-mode 1)
  :config
  (progn
    (setq ido-enable-prefix nil
	  ido-enable-flex-matching t
	  ido-everywhere t
	  ido-create-new-buffer 'always
	  ido-use-filename-at-point 'guess
	  ido-max-prospects 10
	  ido-default-file-method 'selected-window
	  ido-auto-merge-work-directories-length -1
	  ido-use-virtual-buffers t)))
#+END_SRC

*** ido-ubiquitous

#+BEGIN_SRC emacs-lisp
(use-package ido-ubiquitous
  :init
  (ido-ubiquitous-mode 1))
#+END_SRC

*** lisp-mode

#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :init
  (add-hook 'emacs-lisp-mode-hook
	    '(lambda ()
	       (turn-on-eldoc-mode))))
#+END_SRC

*** message

#+BEGIN_SRC emacs-lisp
(use-package message
  :init
  (progn
    ;; Use MSMTP with auto-smtp selection
    ;; http://www.emacswiki.org/emacs/GnusMSMTP#toc3
    ;;
    ;; 'message-sendmail-f-is-evil nil' is the default on Debian squeeze
    ;; (emacs >= 23.2+1-5)
    (setq sendmail-program "/usr/bin/msmtp"
	  mail-specify-envelope-from t
	  mail-envelope-from 'header
	  message-sendmail-envelope-from 'header)

    ;; send-mail-function's default value changed to sendmail-query-once in Emacs 24
    (setq send-mail-function 'sendmail-send-it)

    ;; Enable gnus-alias
    (add-hook 'message-setup-hook 'gnus-alias-determine-identity)
    (define-key message-mode-map (kbd "C-c C-p") 'gnus-alias-select-identity)

    ;; Enable notmuch-address completion
    ;; (notmuch-address-message-insinuate)

    (defun my-setup-message-mode ()
      "My preferences for message mode"
      (interactive)

      ;; Enable bbdb completion
      (bbdb-insinuate-message)

      ;; Bind C-M-j to message-newline-and-reformat
      ;;
      ;; Gnome terminal seems to translate M-RET to C-M-j. The GUI shouldn't
      ;; have this problem.
      (if window-system
	  nil
	(progn
	  (define-key message-mode-map "\C-\M-j" 'message-newline-and-reformat))))

    (add-hook 'message-setup-hook 'my-setup-message-mode)))
#+END_SRC

*** notmuch

#+BEGIN_SRC emacs-lisp
(use-package notmuch
  :init
  (progn
    ;; notmuch-always-prompt-for-sender requires ido-mode
    ;; Add (ido-mode t) to emacs configuration
    (setq notmuch-always-prompt-for-sender t)

    ;; Use Bcc instead of Fcc
    (setq notmuch-fcc-dirs nil)

    (setq notmuch-saved-searches '(("Personal Inbox" . "tag:inbox and not tag:uw and (not tag:lists or (tag:lists::wallop_2012 or tag:lists::cheastyboys))")
				   ("UW Inbox" . "tag:inbox and tag:uw and (not tag:lists or (tag:lists::cirg-adm or tag:lists::cirg-adm-alerts or tag:lists::cirg-core tag:lists::kenyaemr-developers)) and not (from:root or (tag:nagios and not tag:lists))")
				   ("Action" . "tag:action")
				   ("Waiting" . "tag:waiting")
				   ("Secondary Lists" . "tag:inbox and (tag:lists::notmuch or tag:lists::vcs-home or tag:lists::techsupport)")
				   ("Debian Security Inbox" . "tag:inbox and tag:lists::debian-security-announce")))

    ;; Show newest mail first
    (setq notmuch-search-oldest-first nil)

    ;; Notmuch remote setup (on all hosts except garnet)
    (when (not (string= system-name "garnet.ciffer.net"))
      (setq notmuch-command "notmuch-remote"))

    ;; Getting Things Done (GTD) keybindings

    (setq notmuch-tag-macro-alist
	  (list
	   '("a" "+action" "-waiting" "-inbox")
	   '("w" "-action" "+waiting" "-inbox")
	   '("d" "-action" "-waiting" "-inbox")))

    (defun notmuch-search-apply-tag-macro (key)
      (interactive "k")
      (let ((macro (assoc key notmuch-tag-macro-alist)))
	(notmuch-search-tag (cdr macro))))

    (defun notmuch-show-apply-tag-macro (key)
      (interactive "k")
      (let ((macro (assoc key notmuch-tag-macro-alist)))
	(notmuch-show-tag (cdr macro))))

    (define-key notmuch-search-mode-map "`" 'notmuch-search-apply-tag-macro)
    (define-key notmuch-show-mode-map "`" 'notmuch-show-apply-tag-macro)

    ;; Work around bug with notmuch and emacs-snapshot
    ;; http://notmuchmail.org/pipermail/notmuch/2012/008405.html
    (require 'gnus-art)))
#+END_SRC

*** org

#+BEGIN_SRC emacs-lisp
(require 'org-notmuch)
(add-hook 'org-mode-hook 'auto-fill-mode)
(setq org-replace-disputed-keys t)
(setq org-src-fontify-natively t)
(setq org-src-preserve-indentation t)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((perl . t)
   (ruby . t)
   (sh . t)
   (python . t)
   (emacs-lisp . t)))

;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

*** projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init (projectile-global-mode 1)
  :config
  (progn
    (setq projectile-switch-project-action 'projectile-vc)
    (setq projectile-use-git-grep t)
    (add-hook 'after-change-major-mode-hook 'projectile-update-mode-line)))
#+END_SRC

*** recentf

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (progn
    ;; Enable recentf mode with ido-mode support
    ;;
    ;; http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/

    ;; Increase size of recent file list
    (setq recentf-max-saved-items 50)

    ;; Ignore ephemeral git commit message files
    (add-to-list 'recentf-exclude "/COMMIT_EDITMSG$")
    ;; Ignore temporary notmuch ical files
    (add-to-list 'recentf-exclude "^/tmp/notmuch-ical")

    (defun ido-recentf-open ()
      "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
	  (message "Opening file...")
	(message "Aborting"))))
#+END_SRC

*** ruby-mode

Ruby auto-modes. These are from [[https://github.com/bbatsov/prelude/blob/0a1e8e4057a55ac2d17cc0cd073cc93eb7214ce8/modules/prelude-ruby.el#L39][prelude]].

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :config
  (progn
    (setq ruby-align-to-stmt-keywords t))
  :mode
  (("\\.rake\\'"     . ruby-mode)
   ("Rakefile\\'"    . ruby-mode)
   ("\\.gemspec\\'"  . ruby-mode)
   ("\\.ru\\'"	     . ruby-mode)
   ("Gemfile\\'"     . ruby-mode)
   ("Guardfile\\'"   . ruby-mode)
   ("Capfile\\'"     . ruby-mode)
   ("\\.thor\\'"     . ruby-mode)
   ("Thorfile\\'"    . ruby-mode)
   ("Vagrantfile\\'" . ruby-mode)
   ("\\.jbuilder\\'" . ruby-mode)))
#+END_SRC

*** server

Start Emacs server unless one is already running. =server-running-p=
requires =server=.

#+BEGIN_SRC emacs-lisp
(use-package server
  :init
  (unless (server-running-p)
    (server-start)))
#+END_SRC
*** sh-mode

#+BEGIN_SRC emacs-lisp
(use-package sh-mode
  :init
  (progn
    (defun my-setup-sh-mode ()
      "My preferences for sh-mode"
      (interactive)
      (setq sh-basic-offset 8)
      (setq sh-indentation 8)
      (setq sh-indent-for-case-alt '+)
      (setq sh-indent-for-case-label 0))

    (add-hook 'sh-mode-hook 'my-setup-sh-mode)))
#+END_SRC

(use-package server
  :init
  (unless (server-running-p)
    (server-start)))** Miscellaneous settings

*** slime

[[http://www.common-lisp.net/project/slime/doc/html/Installation.html#Installation][Slime Installation]]

#+BEGIN_SRC emacs-lisp
(use-package slime
  :init
  (setq inferior-lisp-program "sbcl"))
#+END_SRC

*** term

#+BEGIN_SRC emacs-lisp
(defun my-setup-term-mode ()
  "My preferences for term mode"
  (interactive)
  ;; Settings recommended in term.el
  ;;
  ;; http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/term.el?id=c720ef1329232c76d14a0c39daa00e37279aa818#n179
  (make-local-variable 'mouse-yank-at-point)
  (setq mouse-yank-at-point t)
  ;; End of recommended settings

  ;; Disable hl-line-mode in term buffers
  (make-local-variable 'global-hl-line-mode)
  (setq global-hl-line-mode nil)

  ;; Make term mode more term-like

  (define-key term-raw-map (kbd "<C-backspace>") 'term-send-raw)
  (define-key term-raw-map (kbd "<C-S-backspace>") 'term-send-raw)

  ;; Toogle between line and char mode in term-mode
  (define-key term-raw-map (kbd "C-'") 'term-line-mode)
  (define-key term-mode-map (kbd "C-'") 'term-char-mode)

  ;; Enable Emacs key bindings in term mode
  (define-key term-raw-map (kbd "M-!") nil)
  (define-key term-raw-map (kbd "M-&") nil)
  (define-key term-raw-map (kbd "M-:") nil)
  (define-key term-raw-map (kbd "M-x") nil)

  ;; Paste key bindings for Mac keyboards with no insert
  (define-key term-raw-map (kbd "C-c y") 'term-paste)
  (define-key term-raw-map (kbd "s-v") 'term-paste)

  ;; Enable address links in term mode
  (goto-address-mode))

(use-package term
  :init
  (add-hook 'term-mode-hook 'my-setup-term-mode))
#+END_SRC

*** tramp

Use SSH default control master settings. Add the following to
=~/.ssh/config=.

#+BEGIN_EXAMPLE conf
Host *
	ControlMaster auto
	ControlPath ~/.ssh/control.%h_%p_%r
	ControlPersist 60m
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (progn
    (setq tramp-use-ssh-controlmaster-options nil)

    ;; Edit remote files via sudo
    ;;
    ;; See
    ;; http://www.gnu.org/software/emacs/manual/html_node/tramp/Ad_002dhoc-multi_002dhops.html
    ;;
    ;; /ssh:example.com|sudo:localhost:/file

    ;; Use warning font in modeline when working as root
    ;;
    ;; http://www.gnu.org/software/emacs/manual/html_mono/tramp.html#Frequently-Asked-Questions
    ;; (I'ld like to get a Visual Warning when working in a sudo:ed
    ;; context)
    ;;
    (defun my-mode-line-warn-when-root ()
      (when (string-match "^/su\\(do\\)?:" default-directory)
	(setq mode-line-format
	      (format-mode-line mode-line-format 'font-lock-warning-face))))
    (add-hook 'find-file-hooks 'my-mode-line-warn-when-root)
    (add-hook 'dired-mode-hook 'my-mode-line-warn-when-root)))
#+END_SRC

*** windmove

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :config (windmove-default-keybindings))
#+END_SRC

*** winner

#+BEGIN_SRC emacs-lisp
(use-package winner
  :init
  (winner-mode 1))
#+END_SRC

*** recentf

#+BEGIN_SRC emacs-lisp
(use-package recenf
  :init
  (recentf-mode 1))
#+END_SRC

*** TODO zoom-frm

Not working.

#+BEGIN_SRC emacs-lisp
(use-package zoom-frm
  :init (autoload 'zoom-in/out "zoom-frm")
  :bind (("C-+" . zoom-in/out)
	 ("C--" . zoom-in/out)
	 ("C-0" . zoom-in/out)
	 ("C-=" . zoom-in/out)))
#+END_SRC
