* Emacs configuration

** User information

#+BEGIN_SRC emacs-lisp
(setq user-full-name    "Svend Sorensen")
(setq user-mail-address "svend@ciffer.net")
#+END_SRC

** Initialize Cask

#+BEGIN_SRC emacs-lisp
(require 'cask "~/.emacs.d/emacs-cask/cask.el")
(cask-initialize)
#+END_SRC

** UI

Hide welcome screen.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Display date and time in 24 hour format
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)

;; Copy test selected by the mouse to the kill ring
;;
;; This was turned off in Emacs 24
(setq mouse-drag-copy-region t)

;; Scroll one line at a time with mouse
(setq mouse-wheel-scroll-amount '(1))

;; Display clock in the status bar
(display-time-mode t)

;; Display column number in mode-line
;;
;; (Line number is displayed by default.)
(column-number-mode t)

;; Hilight the current line
;;
;; To disable for a mode, add this to the mode hook
;;
;; (make-local-variable 'global-hl-line-mode)
;; (setq global-hl-line-mode nil)
(global-hl-line-mode t)

;; Disable menu bar
(menu-bar-mode 0)

;; Disable scroll bar
(scroll-bar-mode 0)

;; Disable tool bar
(tool-bar-mode 0)

;; Enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; Enable recent files mode
(recentf-mode t)
#+END_SRC

*** Themes

Treat all themes as safe.

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC

Solarized light theme.

Disable variable width fonts. Disable variable font sizes.

#+BEGIN_SRC emacs-lisp
(setq solarized-use-variable-pitch nil)
(setq solarized-height-minus-1 1.0)
(setq solarized-height-plus-1 1.0)
(setq solarized-height-plus-2 1.0)
(setq solarized-height-plus-3 1.0)
(setq solarized-height-plus-4 1.0)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(load-theme 'solarized-light t)
#+END_SRC

** Key bindings

*** User-reserved

=C-c letter= and =<F5>= through =<F9>= are reserved for user use.
Press =C-c C-h= to show all of these.

- [[info:elisp#Key Binding Conventions][Key Binding Conventions]]
- http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a")   'align-current)
(global-set-key (kbd "C-c b")   'bbdb)
(global-set-key (kbd "C-c d")   'my-insert-date)
(global-set-key (kbd "C-c e")   'eww)
(global-set-key (kbd "C-c f")   'flycheck-mode)
(global-set-key (kbd "C-c h f") 'helm-firefox-bookmarks)
(global-set-key (kbd "C-c h f") 'helm-find-files)
(global-set-key (kbd "C-c h g") 'helm-git-grep-from-here)
(global-set-key (kbd "C-c h p") 'helm-projectile)
(global-set-key (kbd "C-c h x") 'helm-M-x)
(global-set-key (kbd "C-c k")   'kill-this-buffer)
(global-set-key (kbd "C-c m")   'magit-status)
(global-set-key (kbd "C-c n")   'linum-mode)
(global-set-key (kbd "C-c o a") 'org-agenda)
(global-set-key (kbd "C-c o b") 'org-iswitchb)
(global-set-key (kbd "C-c o c") 'org-capture)
(global-set-key (kbd "C-c o l") 'org-store-link)
(global-set-key (kbd "C-c o r") 'org-remember)
(global-set-key (kbd "C-c r")   'revert-buffer)
(global-set-key (kbd "C-c s")   'toggle-truncate-lines)
(global-set-key (kbd "C-c t")   'my-switch-to-term)
(global-set-key (kbd "C-c w")   'whitespace-mode)
#+END_SRC

*** Non-user

#+BEGIN_SRC emacs-lisp
;; zoom-frm
(autoload 'zoom-in/out "zoom-frm")
(define-key ctl-x-map (kbd "C-+")   'zoom-in/out)
(define-key ctl-x-map (kbd "C--")   'zoom-in/out)
(define-key ctl-x-map (kbd "C-0")   'zoom-in/out)
(define-key ctl-x-map (kbd "C-=")   'zoom-in/out)

(global-set-key (kbd "C-`")         'helm-for-files)

; buffer-move
(global-set-key (kbd "<C-S-up>")    'buf-move-up)
(global-set-key (kbd "<C-S-down>")  'buf-move-down)
(global-set-key (kbd "<C-S-left>")  'buf-move-left)
(global-set-key (kbd "<C-S-right>") 'buf-move-right)

(global-set-key (kbd "M-x")	    'smex)
(global-set-key (kbd "M-X")	    'smex-major-mode-commands)
#+END_SRC

** Emacs paths

#+BEGIN_SRC emacs-lisp
(defvar emacs-cache-dir "~/.cache/emacs"
  "Path to store temporary emacs files.")
#+END_SRC

** After-loads

#+BEGIN_SRC emacs-lisp
(easy-after-load)
#+END_SRC

** Emacs global modes

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
(windmove-default-keybindings)
(add-hook 'after-init-hook 'global-flycheck-mode)
;; (add-hook 'after-init-hook 'ido-mode)
;; (add-hook 'after-init-hook 'ido-ubiquitous)
(add-hook 'after-init-hook 'projectile-global-mode)
;; (add-hook 'after-init-hook 'bash-completion-setup)

;; ido-mode
(require 'ido)
(require 'ido-ubiquitous)
(require 'flx-ido)
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point 'guess
      ido-max-prospects 10
      ido-save-directory-list-file (expand-file-name "ido.hist" emacs-cache-dir)
      ido-default-file-method 'selected-window
      ido-auto-merge-work-directories-length -1)
(ido-mode +1)
(ido-ubiquitous-mode +1)
;; smarter fuzzy matching for ido
(flx-ido-mode +1)
;; disable ido faces to see flx highlights
(setq ido-use-faces nil)
#+END_SRC

** Emacs temporary files

Put temporary files under =~/.cache/emacs=.

#+BEGIN_SRC emacs-lisp
(defvar emacs-cache-dir "~/.cache/emacs"
  "Path to store temporary emacs files.")

;; Backup and auto-saves
(setq backup-directory-alist
      `((".*" . ,(expand-file-name "backup/" emacs-cache-dir))))
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "backup/" emacs-cache-dir) t)))

(setq desktop-path `(,emacs-cache-dir))
(desktop-save-mode 1)

;; Auto-save list files
(setq auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" emacs-cache-dir))

;; Lock files
;;
;; http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html
;;
;; Locks are created in the same directory as the file being
;; edited. They can be disabled as of 24.3.
;;
;; http://lists.gnu.org/archive/html/emacs-devel/2011-07/msg01020.html
(setq create-lockfiles nil)

;; URL cache
(setq url-cache-directory (expand-file-name "url" emacs-cache-dir))

(setq save-place-file (expand-file-name "places" emacs-cache-dir))

;; Minibuffer history
(setq history-length 10000)
(setq savehist-file (expand-file-name "history" emacs-cache-dir))
(setq savehist-mode t)
#+END_SRC

** User defined functions

#+BEGIN_SRC emacs-lisp
(defun my-insert-date ()
  "Insert date string"
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S")))

(defun my-switch-to-term ()
  "Switch to term running in the default-directory,
otherwise start a new ansi-term"
  (interactive)
  (let (found-buffer
	(directory (expand-file-name default-directory))
	(buffers (buffer-list)))
    (while (and (not found-buffer)
		buffers)
      (with-current-buffer (car buffers)
	(when (and (string= major-mode "term-mode")
		   (string= default-directory directory))
	  (setq found-buffer (car buffers)))
	(setq buffers (cdr buffers))))
    ;; If we found a term, switch to it, otherwise start a term
    (if (and found-buffer
	     (not (eq found-buffer (current-buffer))))
	(switch-to-buffer found-buffer)
      (ansi-term "bash"))))
#+END_SRC

** OS X specific configuration

- Turn on menu bar, since it does not use any extra space on OS X.
- Use Adobe's Source Code Pro font.

#+BEGIN_SRC emacs-lisp
(when (eq window-system 'ns)
  (menu-bar-mode 1)
  (set-face-attribute 'default nil :font "Source Code Pro" :height 140))
#+END_SRC

** Auto modes

=bash-fc-*= are bash command editing temporary files (=fc= built-in).

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '(".mrconfig$"		  . conf-mode))
(add-to-list 'auto-mode-alist '("/etc/network/interfaces" . conf-mode))
(add-to-list 'auto-mode-alist '("\\.pp$"		  . puppet-mode))
(add-to-list 'auto-mode-alist '("Carton\\'"		  . lisp-mode))
(add-to-list 'auto-mode-alist '("bash-fc-"		  . sh-mode))
#+END_SRC

Ruby auto-modes. These are from [[https://github.com/bbatsov/prelude/blob/0a1e8e4057a55ac2d17cc0cd073cc93eb7214ce8/modules/prelude-ruby.el#L39][prelude]].

#+BEGIN_SRC emacs-lisp
;; Rake files are ruby, too, as are gemspecs, rackup files, and gemfiles.
(add-to-list 'auto-mode-alist '("\\.rake\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.gemspec\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("Guardfile\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("Capfile\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.thor\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("Thorfile\\'"	 . ruby-mode))
(add-to-list 'auto-mode-alist '("Vagrantfile\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.jbuilder\\'" . ruby-mode))
#+END_SRC

** Languages

*** Programming modes

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'prog-mode-hook 'goto-address-prog-mode)
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
#+END_SRC

*** Emacs lisp

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          '(lambda ()
	     (turn-on-eldoc-mode)))
#+END_SRC

*** Ruby

#+BEGIN_SRC
(setq ruby-align-to-stmt-keywords t)
#+END_SRC

*** Shell script

#+BEGIN_SRC emacs-lisp
(defun my-setup-sh-mode ()
  "My preferences for sh-mode"
  (interactive)
  (setq sh-basic-offset 8)
  (setq sh-indentation 8)
  (setq sh-indent-for-case-alt '+)
  (setq sh-indent-for-case-label 0))

(add-hook 'sh-mode-hook 'my-setup-sh-mode)
#+END_SRC

** Emacs server

Start Emacs server unless one is already running. =server-running-p=
requires =server=.

#+BEGIN_SRC emacs-lisp
(autoload 'server-running-p "server")
(unless (server-running-p)
  (server-start))
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
(setq tramp-use-ssh-controlmaster-options nil)
#+END_SRC

** Miscellaneous settings

Balance windows automatically.

#+BEGIN_SRC emacs-lisp
(defadvice split-window-below (after restore-balanace-below activate)
  (balance-windows))

(defadvice split-window-right (after restore-balance-right activate)
  (balance-windows))

(defadvice delete-window (after restore-balance activate)
  (balance-windows))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq safe-local-variable-values '((encoding . utf-8)))

;; Require an EOL at end of files
(setq require-final-newline t)

;; One space after sentences
(setq sentence-end-double-space nil)

;; Enable disabled commands
(mapc (lambda (command) (put command 'disabled nil))
      '(downcase-region upcase-region upcase-initials-region))

;; Use GUI web browser if it is available
(if (executable-find "x-www-browser")
    (progn
      (setq browse-url-generic-program "x-www-browser")
      (setq browse-url-browser-function 'browse-url-generic)))

;; Do not clobber text copied from the clipboard
(setq save-interprogram-paste-before-kill t)

;; Turn on flyspell and goto-address for all text and prog modes
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'text-mode-hook 'goto-address-mode)
#+END_SRC

** Package settings

*** use-package

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

*** exec-path-from-shell

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if
  (eq window-system 'ns)
  :init
  (progn
    (mapc
     (lambda (variable)
       (add-to-list 'exec-path-from-shell-variables variable))
     '("ALTERNATE_EDITOR" "EDITOR" "GPG_AGENT_INFO" "INFOPATH" "LANG" "LC_ALL" "SSH_AUTH_SOCK"))
    (exec-path-from-shell-initialize)))
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (require 'flycheck-ledger))
#+END_SRC

*** helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :init
  (progn
    (require 'helm-ls-git)
    (add-to-list 'helm-for-files-preferred-list 'helm-source-ls-git t)
    (delete 'helm-source-locate helm-for-files-preferred-list)
    (helm-attrset 'follow 1 helm-source-buffers-list)

    (setq helm-adaptive-history-file (expand-file-name "helm-adaptive-history" emacs-cache-dir))
    (helm-adaptative-mode 1)))
#+END_SRC

*** ido

#+BEGIN_SRC emacs-lisp
(use-package ido
  :init
  (progn
    (setq ido-save-directory-list-file (expand-file-name ".ido.last" emacs-cache-dir))
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (setq ido-use-virtual-buffers t)))

#+END_SRC

*** projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (progn
    (setq projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" emacs-cache-dir))
    (projectile-load-known-projects)

    (setq projectile-switch-project-action 'projectile-vc)
    (setq projectile-use-git-grep t)

    (add-hook 'after-change-major-mode-hook 'projectile-update-mode-line)))
#+END_SRC

*** slime

[[http://www.common-lisp.net/project/slime/doc/html/Installation.html#Installation][Slime Installation]]

#+BEGIN_SRC emacs-lisp
(use-package slime
  :init
  (setq inferior-lisp-program "sbcl"))
#+END_SRC
*** term

#+BEGIN_SRC emacs-lisp
(defun my-setup-term-mode ()
  "My preferences for term mode"
  (interactive)
  ;; Settings recommended in term.el
  ;;
  ;; http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/term.el?id=c720ef1329232c76d14a0c39daa00e37279aa818#n179
  (make-local-variable 'mouse-yank-at-point)
  (setq mouse-yank-at-point t)
  ;; End of recommended settings

  ;; Disable hl-line-mode in term buffers
  (make-local-variable 'global-hl-line-mode)
  (setq global-hl-line-mode nil)

  ;; Make term mode more term-like

  (define-key term-raw-map (kbd "<C-backspace>") 'term-send-raw)
  (define-key term-raw-map (kbd "<C-S-backspace>") 'term-send-raw)

  ;; Toogle between line and char mode in term-mode
  (define-key term-raw-map (kbd "C-'") 'term-line-mode)
  (define-key term-mode-map (kbd "C-'") 'term-char-mode)

  ;; Enable Emacs key bindings in term mode
  (define-key term-raw-map (kbd "M-!") nil)
  (define-key term-raw-map (kbd "M-&") nil)
  (define-key term-raw-map (kbd "M-:") nil)
  (define-key term-raw-map (kbd "M-x") nil)

  ;; Paste key bindings for Mac keyboards with no insert
  (define-key term-raw-map (kbd "C-c y") 'term-paste)
  (define-key term-raw-map (kbd "s-v") 'term-paste)

  ;; Enable address links in term mode
  (goto-address-mode))

(use-package term
  :init
  (add-hook 'term-mode-hook 'my-setup-term-mode))
#+END_SRC
